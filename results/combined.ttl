@prefix : <http://lod.csd.auth.gr/atm/atm.ttl#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix xsp: <http://www.owl-ontologies.com/2005/08/07/xsp.owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix swrl: <http://www.w3.org/2003/11/swrl#> .
@prefix swrlb: <http://www.w3.org/2003/11/swrlb#> .
@prefix protege: <http://protege.stanford.edu/plugins/owl/protege#> .
@prefix lex: <http://example.com/lexical#> .
@prefix ex: <http://example.com/lexical/example#> .
@base <http://lod.csd.auth.gr/atm/atm.ttl> .

<http://lod.csd.auth.gr/atm/atm.ttl> rdf:type owl:Ontology .
lex:Noun a rdfs:Class ;
    rdfs:subClassOf lex:Word .
lex:Word a rdfs:Class .
:AuthorizationProcess a rdfs:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :receivesAcceptanceFrom ;
            owl:someValuesFrom :BankComputer ] .
:Bank a rdfs:Class,
        owl:Class ;
    rdfs:label "Bank"@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :hasBankCode ;
            owl:someValuesFrom :CashCard ] ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:onProperty :providesSecurity ;
            owl:someValuesFrom :Computer ],
        [ a owl:Restriction ;
            owl:onProperty :providesSecurity ;
            owl:someValuesFrom :Software ] .
:Customer a rdfs:Class,
        owl:Class ;
    rdfs:label "Customer"@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :callBank ;
            owl:someValuesFrom :Bank ] .
:Message a rdfs:Class,
        owl:Class ;
    rdfs:label "Message"@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :displayMessage ;
            owl:someValuesFrom :Bank ],
        [ a owl:Restriction ;
            owl:onProperty :hasMessage ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:intersectionOf ( :ValidCashCard :ValidPassword :ProblemWithAccount ) ] ] .
:StartTransactionDialog a rdfs:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :isStartedBy ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:intersectionOf ( :AuthorizationProcess :ValidPassword :ValidSerialNumber ) ] ] .
:ValidPassword a rdfs:Class,
        owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :hasPassword ;
            owl:someValuesFrom :Password ],
        :Password .
:ValidSerialNumber a rdfs:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :hasSerialNumber ;
            owl:someValuesFrom :SerialNumber ] .
<Actor:Customer> a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty <Function:dispense> ;
            owl:someValuesFrom <Item:card> ] .
<System:bank_computer> a owl:Class .
lex:AccountHolder a lex:Word ;
    lex:synonym :Customer .
lex:AutomatedTellerMachine a lex:Word ;
    lex:synonym :ATM .
lex:BankAccount a lex:Word ;
    lex:synonym :Account .
lex:BankCard a lex:Word ;
    lex:synonym :CashCard .
lex:BankCustomer a lex:Word ;
    lex:synonym :Customer .
lex:FinancialInstitution a lex:Word ;
    lex:synonym :Bank .
lex:Person a lex:Word ;
    lex:synonym :Customer .
lex:WithdrawalTransaction a lex:Word ;
    lex:synonym :Withdrawal .
lex:antonym a rdf:Property ;
    rdfs:domain lex:Word ;
    rdfs:range lex:Word .
lex:synonym a rdf:Property ;
    rdfs:domain lex:Word ;
    rdfs:range lex:Word .
ex:quick a lex:Word ;
    lex:synonym ex:fast .
ex:slow a lex:Word ;
    lex:antonym ex:fast .
:ATMRequestVerification a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :requestsVerificationOf ;
            owl:someValuesFrom :Card ] .
:CardEjected a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :isResultOf ;
            owl:someValuesFrom :Authorization ] .
:CreateAccountRecord a owl:ObjectProperty ;
    rdfs:domain :Account ;
    rdfs:range :AccountRecord .
:ErrorMessageDisplayed a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :isResultOf ;
            owl:someValuesFrom :Authorization ] .
:NoCashCardInATM a owl:Class ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:cardinality "0"^^xsd:nonNegativeInteger ;
            owl:onProperty :hasCashCard ],
        :ShouldDisplayInitialDisplay .
:RunningOutOfMoney a owl:Class ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:allValuesFrom owl:Nothing ;
            owl:onProperty :AcceptsCard ] .
:TransactionFailure a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :hasRequestedAmount ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:intersectionOf ( [ a owl:Restriction ;
                                owl:hasValue true ;
                                owl:onProperty :exceedsLimit ] ) ] ],
        :Transaction .
:TransactionSuccess a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :sends ;
            owl:someValuesFrom :BankComputerSendsSuccessMessage ],
        :Transaction ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:hasValue "succeeded"^^xsd:string ;
            owl:onProperty :hasStatus ] .
:UpdateLogFile a owl:ObjectProperty ;
    rdfs:domain :LogFile ;
    rdfs:range :LogFile .
:ValidBankCode a owl:Class ;
    rdfs:subClassOf :BankCode .
:belongsToBank a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :Bank .
:cardIssuedBy a owl:ObjectProperty ;
    rdfs:domain :CashCard ;
    rdfs:range :Bank .
:displays a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :AmountOfMoney .
:enters a owl:ObjectProperty ;
    rdfs:domain :Customer ;
    rdfs:range :CashCard .
:from a owl:ObjectProperty ;
    rdfs:domain :Response ;
    rdfs:range :BankComputer .
:hasAccount a owl:ObjectProperty ;
    rdfs:domain :Bank,
        :Customer ;
    rdfs:range :Account .
:hasDailyLimit a owl:DatatypeProperty ;
    rdfs:domain :Account ;
    rdfs:range xsd:decimal .
:hasEnteredAmount a owl:ObjectProperty ;
    rdfs:domain :Customer ;
    rdfs:range :Transaction .
:hasMoney a owl:ObjectProperty ;
    rdfs:domain :Account ;
    rdfs:range :Money .
:hasMonthlyLimit a owl:DatatypeProperty ;
    rdfs:domain :Account ;
    rdfs:range xsd:decimal .
:hasProblemWithAccount a owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :ProblemWithAccount .
:hasRequest a owl:ObjectProperty ;
    rdfs:domain :ProcessTransaction ;
    rdfs:range :TransactionRequest .
:hasValidPassword a owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :ValidPassword .
:initializeParameters a owl:ObjectProperty ;
    rdfs:domain :Parameter ;
    rdfs:range :Parameter .
:initializedWith a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range xsd:decimal .
:initiates a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :WithdrawalSequence .
:k a :Parameter ;
    :initializeParameters :t ;
    :setParameters :t .
:m a :Parameter ;
    :initializeParameters :t ;
    :setParameters :t .
:n a :Parameter ;
    :initializeParameters :t ;
    :setParameters :t .
:ownsCard a owl:ObjectProperty ;
    rdfs:domain :Customer ;
    rdfs:range :CashCard .
:receivesRequest a owl:ObjectProperty ;
    rdfs:domain :BankComputer ;
    rdfs:range :processTransaction .
:returnsBankCode a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :BankCode .
:setParameters a owl:ObjectProperty ;
    rdfs:domain :Parameter ;
    rdfs:range :Parameter .
:waitForResponse a owl:ObjectProperty ;
    rdfs:domain :System ;
    rdfs:range :Response .
<Flow:message> a owl:Class .
<Item:card> a owl:Class .
<Item:transaction> a owl:Class .
<StateValue:succeeded> a owl:Class .
<System:ATM> a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty <Function:dispense> ;
            owl:someValuesFrom <Item:money> ],
        [ a owl:Restriction ;
            owl:onProperty <Flow:message> ;
            owl:someValuesFrom [ a owl:Restriction ;
                    owl:hasValue <StateValue:succeeded> ;
                    owl:onProperty <Item:transaction> ] ],
        [ a owl:Restriction ;
            owl:onProperty <Function:dispense> ;
            owl:someValuesFrom <Item:money> ] .
:ATMOperation a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :hasOutcome ;
            owl:someValuesFrom :DisplayError ],
        [ a owl:Restriction ;
            owl:onProperty :hasOutcome ;
            owl:someValuesFrom :ReturnCard ] .
:ATMResponse a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :hasMoneyDispensed ;
            owl:someValuesFrom :Money ] .
:AcceptsCard a owl:ObjectProperty ;
    rdf:domain :ATM ;
    rdf:range :Card .
:AccountOK a :Message,
        owl:NamedIndividual .
:AccountRecord a owl:Class .
:AmountOfMoney a owl:Class .
:AuthorizationDialog a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :requestsUserToEnter ;
            owl:someValuesFrom :Password ] .
:BadBankCode a owl:Class .
:BadPassword a owl:Class .
:BadPasswordMessage a owl:Class ;
    rdfs:subClassOf :Message .
:BankComputerSendsSuccessMessage a owl:Class ;
    rdfs:subClassOf :BankComputer ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:onProperty :sends ;
            owl:someValuesFrom :transactionSucceeded ] .
:Computer a owl:Class .
:Dispense a owl:Class ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:onProperty :after ;
            owl:someValuesFrom :Update ] .
:Dispensed20DollarBill a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :MoneyDispensed [ a owl:Restriction ;
                        owl:onProperty :dispenses ;
                        owl:someValuesFrom :MoneyDispensed ] ) ] .
:InvalidBankCode a owl:Class ;
    rdfs:subClassOf :BankCode ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:hasValue "bad bank code" ;
            owl:onProperty :hasMessage ] .
:ProcessTransaction a owl:Class .
:ShouldDisplayInitialDisplay a owl:Class ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:onProperty :display ;
            owl:someValuesFrom :InitialDisplay ] .
:Software a owl:Class .
:SuccessfulAuthorization a owl:Class ;
    rdfs:subClassOf :Authorization .
:TransactionFailed a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :hasStatus ;
            owl:someValuesFrom :Transaction ] .
:TransactionLimit a owl:Class,
        owl:Restriction ;
    owl:onProperty :exceeds ;
    owl:someValuesFrom :Transaction .
:TransactionRequest a owl:Class .
:WithdrawalSequence a owl:Class .
:accepts a owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Withdrawal .
:after a owl:ObjectProperty ;
    rdfs:domain :Dispense ;
    rdfs:range :Update .
:amount a owl:DatatypeProperty .
:callBank a rdf:Property ;
    rdfs:label "call bank"@en ;
    rdfs:domain :Customer ;
    rdfs:range :Bank .
:display a owl:ObjectProperty ;
    rdf:domain :ATM ;
    rdf:range :InitialDisplay .
:displayDuration a owl:DatatypeProperty ;
    rdfs:domain :ErrorMessage ;
    rdfs:range xsd:integer .
:displayErrorMessage a owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :ErrorMessage .
:displayMessage a rdf:Property ;
    rdfs:label "display message"@en ;
    rdfs:domain :Bank ;
    rdfs:range :Message .
:ejectCard a owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :Card .
:exceeds a owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :TransactionLimit .
:hasBankComputerResponse a owl:ObjectProperty ;
    rdfs:domain :Card ;
    rdfs:range :BankComputerResponse .
:hasCard a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :Card .
:hasCashCard a owl:ObjectProperty ;
    rdf:domain :ATM ;
    rdf:range :CashCard .
:hasErrorMessage a owl:ObjectProperty ;
    rdfs:domain :Card,
        :System ;
    rdfs:range :ErrorMessage .
:hasItemState a owl:ObjectProperty ;
    rdfs:domain :Item ;
    rdfs:range :StateValue .
:hasMoneyDispensed a owl:ObjectProperty ;
    rdfs:domain :ATMResponse ;
    rdfs:range :Money .
:hasResponseTime a owl:DatatypeProperty ;
    rdfs:domain :BankComputerResponse ;
    rdfs:range xsd:integer .
:hasStateValue a owl:ObjectProperty ;
    rdfs:domain :Function ;
    rdfs:range :StateValue .
:hasUpdate a owl:ObjectProperty ;
    rdfs:domain :Account ;
    rdfs:range :Update .
:hasValidCashCard a owl:ObjectProperty ;
    rdfs:domain :ATM,
        :Bank ;
    rdfs:range :CashCard,
        :ValidCashCard .
:initiated a :StateValue .
:isCanceled a owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :Transaction .
:isLogged a owl:ObjectProperty ;
    rdfs:domain :SerialNumber ;
    rdfs:range :Log .
:isRestarted a owl:ObjectProperty ;
    rdfs:domain :TransactionDialog ;
    rdfs:range :TransactionDialog .
:isSuccessful a owl:ObjectProperty ;
    rdfs:domain :Authorization,
        :Transaction ;
    rdfs:range :SuccessfulAuthorization,
        rdf:Literal .
:logs a owl:ObjectProperty ;
    rdfs:domain :MoneyDispensed ;
    rdfs:range :AmountLogged .
:processTransaction a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :Transaction .
:processedBy a owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :ATM .
:readsBankCode a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range xsd:string .
:readsSerialNumber a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range xsd:string .
:requestsUserToEnter a owl:ObjectProperty ;
    rdfs:domain :AuthorizationDialog ;
    rdfs:range :Password .
:sendMessage a owl:ObjectProperty ;
    rdfs:domain :BankComputer ;
    rdfs:range :Message .
:sendsMessage a owl:ObjectProperty ;
    rdfs:domain :Bank,
        :BankComputer ;
    rdfs:range :ATM,
        :Message .
:sendsMessageTo a owl:ObjectProperty ;
    rdfs:domain :BankComputer ;
    rdfs:range :ATM .
:sendsResponse a owl:ObjectProperty ;
    rdfs:domain :AmountLogged ;
    rdfs:range :ResponseSent .
:successful a :StateValue .
:transactionSucceeded a :Message ;
    rdfs:label "transaction succeeded"@en .
:valid a owl:Class ;
    rdfs:subClassOf :CashCard .
:validFor a owl:ObjectProperty ;
    rdfs:domain :Password ;
    rdfs:range :CashCard .
ex:fast a lex:Word .
:BankComputerResponse a owl:Class ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:datatype xsd:integer ;
            owl:hasValue 2 ;
            owl:onProperty :hasResponseTime ] .
:DisplayError a owl:Class .
:InitialDisplay a owl:Class .
:InvalidPassword a owl:Class ;
    rdfs:subClassOf :Password .
:Log a owl:Class .
:LogFile a owl:Class .
:ProblemWithAccount a owl:Class .
:Response a owl:Class .
:ReturnCard a owl:Class .
:System a owl:Class .
:WrongPasswordEntry a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onClass :Card ;
            owl:onProperty :hasWrongPasswordEntry ;
            owl:qualifiedCardinality "3"^^xsd:nonNegativeInteger ] .
:dispenses a owl:ObjectProperty ;
    rdfs:domain :ATM,
        :Dispensed20DollarBill ;
    rdfs:range :Money,
        :MoneyDispensed .
:exceedsLimit a owl:DatatypeProperty ;
    rdfs:range xsd:boolean .
:hasBankCode a owl:DatatypeProperty,
        owl:ObjectProperty ;
    rdfs:domain :BankComputer,
        :CashCard ;
    rdfs:range :Bank,
        :BankCode .
:hasInitialFunctionSequence a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :Function .
:hasMessage a owl:ObjectProperty ;
    rdfs:domain :ATM,
        :InvalidBankCode ;
    rdfs:range :Message,
        rdfs:Literal .
:hasOutcome a owl:ObjectProperty ;
    rdfs:domain :ATMOperation ;
    rdfs:range [ a owl:Class ;
            owl:unionOf ( :DisplayError :ReturnCard ) ] .
:hasRequestedAmount a owl:ObjectProperty .
:hasStatus a owl:DatatypeProperty,
        owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :TransactionFailed,
        xsd:string .
:hasWrongPasswordEntry a owl:ObjectProperty ;
    rdfs:domain :Card ;
    rdfs:range :WrongPasswordEntry .
:isValid a owl:ObjectProperty ;
    rdfs:domain [ a owl:Class ;
            owl:unionOf ( :CashCard :Password :Account ) ] ;
    rdfs:range rdf:Literal .
:providesSecurity a owl:ObjectProperty .
:receives a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :BadAccount .
:setsItem a owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :Item .
:transaction a :Item .
:verifies a owl:ObjectProperty ;
    rdfs:domain :ATM,
        :Request ;
    rdfs:range :BankComputer,
        :Password .
:withdrawal a :Function .
<Function:dispense> a owl:Class,
        owl:ObjectProperty ;
    rdfs:domain <System:ATM> ;
    rdfs:range <Item:money> .
<Item:money> a owl:Class .
:BadAccount a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :sends ;
            owl:someValuesFrom :Bank ],
        [ a owl:Restriction ;
            owl:onProperty :receives ;
            owl:someValuesFrom :ATM ] .
:Function a owl:Class .
:Item a owl:Class .
:Request a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :processes ;
            owl:someValuesFrom :Transaction ],
        [ a owl:Restriction ;
            owl:onProperty :verifies ;
            owl:someValuesFrom :Password ] .
:ResponseSent a owl:Class .
:SerialNumber a owl:Class .
:TransactionDialog a owl:Class,
        owl:Restriction ;
    owl:onProperty :isRestarted ;
    owl:someValuesFrom :TransactionDialog .
:Update a owl:Class ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:onProperty :hasUpdate ;
            owl:someValuesFrom :Account ] .
:ValidCashCard a owl:Class ;
    rdfs:subClassOf :CashCard .
:Withdrawal a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :dispenses ;
            owl:someValuesFrom :Money ],
        [ a owl:Restriction ;
            owl:onProperty :processes ;
            owl:someValuesFrom :Bank ],
        [ a owl:Restriction ;
            owl:onProperty :accepts ;
            owl:someValuesFrom :Bank ] .
:checks a owl:ObjectProperty ;
    rdfs:domain :ATM,
        :BankComputer ;
    rdfs:range :CashCard,
        :Password .
:hasSerialNumber a owl:ObjectProperty ;
    rdfs:domain :CashCard ;
    rdfs:range :SerialNumber .
:processes a owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Transaction,
        :Withdrawal .
:AmountLogged a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :ResponseSent [ a owl:Restriction ;
                        owl:onProperty :sendsResponse ;
                        owl:someValuesFrom :ResponseSent ] ) ] .
:Authorization a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :receives ;
            owl:someValuesFrom [ owl:unionOf ( :BadPassword :BadBankCode :BadAccount ) ] ] .
:MoneyDispensed a owl:Class ;
    owl:equivalentClass [ a owl:Class ;
            owl:intersectionOf ( :AmountLogged [ a owl:Restriction ;
                        owl:onProperty :logs ;
                        owl:someValuesFrom :AmountLogged ] ) ] .
:StateValue a owl:Class .
:hasPassword a owl:DatatypeProperty,
        owl:ObjectProperty ;
    rdfs:domain :BankComputer ;
    rdfs:range :Password .
:sends a owl:ObjectProperty ;
    rdfs:domain :ATM,
        :Bank,
        :BankComputer ;
    rdfs:range :BadAccount,
        :Message,
        :Request .
:BankCode a owl:Class,
        owl:DatatypeProperty ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :isValid ;
            owl:someValuesFrom xsd:boolean ] .
:ErrorMessage a owl:Class ;
    rdfs:label "Error Message"@en ;
    rdfs:comment "An error message is displayed."@en ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:allValuesFrom xsd:integer ;
            owl:hasValue 30 ;
            owl:onProperty :displayDuration ] .
:Money a owl:Class .
:Parameter a owl:Class .
:Card a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :hasCard ;
            owl:someValuesFrom [ a owl:Restriction ;
                    owl:onClass :WrongPasswordEntry ;
                    owl:onProperty :hasWrongPasswordEntry ;
                    owl:qualifiedCardinality "3"^^xsd:nonNegativeInteger ] ],
        [ a owl:Restriction ;
            owl:onProperty :hasSerialNumber ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :hasPassword ;
            owl:someValuesFrom xsd:string ] ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:onProperty :hasBankComputerResponse ;
            owl:someValuesFrom [ a owl:Restriction ;
                    owl:onProperty :hasErrorMessage ;
                    owl:someValuesFrom :ErrorMessage ] ] .
:Account a owl:Class .
:Password a owl:Class,
        owl:DatatypeProperty ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :validFor ;
            owl:someValuesFrom :valid ],
        [ a owl:Class ;
            owl:unionOf ( :ValidPassword :InvalidPassword ) ] .
:BankComputer a owl:Class,
        owl:NamedIndividual ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :processes ;
            owl:someValuesFrom :Transaction ],
        [ a owl:Restriction ;
            owl:onProperty :checks ;
            owl:someValuesFrom :Password ],
        [ a owl:Restriction ;
            owl:onProperty :hasPassword ;
            owl:someValuesFrom :InvalidPassword ],
        [ a owl:Restriction ;
            owl:onProperty :sendsMessage ;
            owl:someValuesFrom :BadPasswordMessage ],
        [ a owl:Restriction ;
            owl:onProperty :checks ;
            owl:someValuesFrom :BankCode ],
        [ a owl:Restriction ;
            owl:allValuesFrom :ATM ;
            owl:onProperty :sendsMessageTo ] .
:CashCard a owl:Class ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:onProperty :hasSerialNumber ;
            owl:someValuesFrom [ a owl:Restriction ;
                    owl:onProperty :isLogged ;
                    owl:someValuesFrom :Log ] ] .
:Transaction a owl:Class,
        owl:Restriction ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :amount ;
            owl:someValuesFrom xsd:decimal ],
        [ a owl:Restriction ;
            owl:onProperty :onAccount ;
            owl:someValuesFrom :Account ],
        [ a owl:Restriction ;
            owl:onProperty :isSuccessful ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:complementOf [ a owl:DataRange ;
                            owl:oneOf ( true ) ] ] ],
        [ a owl:Restriction ;
            owl:onProperty :displayErrorMessage ;
            owl:someValuesFrom :ErrorMessage ],
        [ a owl:Restriction ;
            owl:onProperty :ejectCard ;
            owl:someValuesFrom :Card ],
        [ a owl:Restriction ;
            owl:onProperty :hasRequestedAmount ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:intersectionOf ( [ a owl:Restriction ;
                                owl:hasValue true ;
                                owl:onProperty :exceedsLimit ] ) ] ] ;
    owl:inverseOf :processedBy ;
    owl:onProperty :isCanceled ;
    owl:someValuesFrom :Transaction .
:ATM a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :checks ;
            owl:someValuesFrom :ValidCashCard ],
        [ a owl:Restriction ;
            owl:onProperty :sends ;
            owl:someValuesFrom :Request ],
        [ a owl:Restriction ;
            owl:onProperty :verifies ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:intersectionOf ( :BankComputer [ a owl:Restriction ;
                                owl:onProperty :hasBankCode ;
                                owl:someValuesFrom rdf:Literal ] [ a owl:Restriction ;
                                owl:onProperty :hasPassword ;
                                owl:someValuesFrom rdf:Literal ] ) ] ] .
[] a owl:Class ;
    rdfs:subClassOf :BankComputer ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:onProperty :sendMessage ;
            owl:someValuesFrom :AccountOK ] ;
    owl:intersectionOf ( [ a owl:Restriction ;
                owl:hasValue true ;
                owl:onProperty :isValid ] ) .
[] a owl:Class ;
    owl:equivalentClass [ a owl:Restriction ;
            owl:onProperty :hasValidCashCard ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:intersectionOf ( :CashCard [ a owl:Restriction ;
                                owl:onProperty :readsSerialNumber ;
                                owl:someValuesFrom xsd:string ] [ a owl:Restriction ;
                                owl:onProperty :readsBankCode ;
                                owl:someValuesFrom xsd:string ] ) ] ] .
[] a owl:Axiom ;
    owl:antecedent [ a owl:Restriction ;
            owl:hasValue :withdrawal ;
            owl:onProperty :hasInitialFunctionSequence ] ;
    owl:consequent [ a owl:Restriction ;
            owl:hasValue :successful ;
            owl:onProperty :hasStateValue ] .
[] a owl:Axiom ;
    owl:antecedent [ a owl:Restriction ;
            owl:hasValue :withdrawal ;
            owl:onProperty :hasInitialFunctionSequence ] ;
    owl:consequent [ a owl:Restriction ;
            owl:hasValue :transaction ;
            owl:onProperty :setsItem ] .
[] a owl:Axiom ;
    owl:antecedent [ a owl:Restriction ;
            owl:hasValue :transaction ;
            owl:onProperty :setsItem ] ;
    owl:consequent [ a owl:Restriction ;
            owl:hasValue :initiated ;
            owl:onProperty :hasItemState ] .
