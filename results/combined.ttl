@prefix : <http://lod.csd.auth.gr/atm/atm.ttl#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix xsp: <http://www.owl-ontologies.com/2005/08/07/xsp.owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix swrl: <http://www.w3.org/2003/11/swrl#> .
@prefix swrlb: <http://www.w3.org/2003/11/swrlb#> .
@prefix protege: <http://protege.stanford.edu/plugins/owl/protege#> .
@base <http://lod.csd.auth.gr/atm/atm.ttl#> .

<http://lod.csd.auth.gr/atm/atm.ttl> rdf:type owl:Ontology .
:ATMDispensesMoneyShape rdf:type owl:Axiom ;
    owl:equivalentProperty :dispensesMoney .
:AccountOkMessage rdf:type :Message ;
    :messageContent "account ok" .
:BadAccount rdf:type :Message .
:BadBankCodeMessage rdf:type :Message ;
    :messageCode "bad bank code" .
:BadPasswordMessage rdf:type :Message .
:BalanceInquiry rdf:type owl:Class ;
    rdfs:subClassOf :Transaction .
:BankProcessesAndAcceptsWithdrawalShape rdf:type owl:Axiom ;
    owl:equivalentProperty :dispensesMoney .
:BankSendsATMReceivesShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If rdf:type bank sends rdf:type message, the ATM must receive the same message." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type :Bank ; :sendsMessage ?msg .
        FILTER NOT EXISTS { ?atm rdf:type :ATM ; :receivesMessage ?msg . }
      }
    """ ] ;
    sh:targetClass :Bank .
:BankSendsBadAccountShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If rdf:type bank sends 'BadAccount' message, the ATM must receive 'BadAccount' message." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type :Bank ; :sendsMessage :BadAccount .
        FILTER NOT EXISTS { ?atm rdf:type :ATM ; :receivesMessage :BadAccount . }
      }
    """ ] ;
    sh:targetClass :Bank .
:CardEjected rdf:type :CashCard .
:Deposit rdf:type owl:Class ;
    rdfs:subClassOf :Transaction .
:ErrorDisplay rdf:type :DisplayState .
:ErrorMessageDurationShape rdf:type sh:NodeShape ;
    sh:property [ sh:datatype xsd:integer ;
            sh:message "Error message must be displayed for at least 30 seconds." ;
            sh:minInclusive 30 ;
            sh:path :displayDuration ] ;
    sh:targetClass :ErrorMessage .
:ExceedsLimitFailsShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If the requested amount exceeds the limit, the transaction will fail." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type atm:Transaction ; atm:requestedAmount ?reqAmount .
        ?atm atm:hasLimit/atm:limitValue ?limit .
        FILTER (?reqAmount > ?limit)
        FILTER NOT EXISTS { ?this atm:transactionStatus ?status . FILTER (?status = "failed") }
      }
    """ ] ;
    sh:targetClass :Transaction .
:InvalidBankCode rdf:type owl:Class .
:InvalidBankCodeShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If the bank code is invalid, the bank computer sends the message 'bad bank code' to the ATM." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type :CashCard ; :isValid ?valid .
        FILTER (?valid = false)
        FILTER NOT EXISTS { 
          ?computer rdf:type :BankComputer ; :sendsMessage :BadBankCodeMessage .
        }
      }
    """ ] ;
    sh:targetClass :CashCard .
:InvalidPasswordTriggersMessageShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If the password is invalid, the bank computer must send rdf:type message indicating rdf:type bad password." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type atm:ATM ; atm:hasPassword ?pw .
        ?pw atm:valid ?valid .
        FILTER (?valid = false)
        FILTER NOT EXISTS {
          ?bc rdf:type atm:BankComputer ; atm:sendsMessage ?msg .
          ?msg atm:indicatesBadPassword ?pw .
        }
      }
    """ ] ;
    sh:targetClass :ATM .
:ProblemMessage rdf:type :Message,
        owl:NamedIndividual .
:SlowResponseRejectsCardShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If responseTime > 2 minutes, ATM must reject card and display ErrorDisplay." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type atm:ATM ; atm:communicatesWith/atm:responseTime ?rt .
        FILTER (?rt > "PT2M"^^xsd:duration)
        FILTER NOT EXISTS { ?this atm:cardRejected ?cr . FILTER (?cr = true) }
        FILTER NOT EXISTS { ?this atm:displaysState atm:ErrorDisplay }
      }
    """ ] ;
    sh:targetClass :ATM .
:SuccessSendsMessageShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If transaction succeeded, bank must send 'transaction succeeded' message to ATM." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type atm:Transaction ; atm:transactionSucceeded ?ts .
        FILTER (?ts = true)
        FILTER NOT EXISTS {
          ?bank atm:sendsMessage atm:TransactionSucceededMessage .
          ?atm atm:receivesMessage atm:TransactionSucceededMessage .
        }
      }
    """ ] ;
    sh:targetClass :Transaction .
:TransactionFailedShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If rdf:type condition is not met, the ATM sends rdf:type 'transaction failed' message." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type atm:ATM .
        FILTER NOT EXISTS { ?this atm:sendsMessage atm:transactionFailed . }
      }
    """ ] ;
    sh:targetClass :ATM .
:TransactionSucceededMessage rdf:type :Message ;
    :messageContent "transaction succeeded" .
:UnsuccessfulTransactionEjectsCardShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If the transaction is not successful, the card should be ejected." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type atm:Transaction ; atm:isSuccessful ?success .
        FILTER (?success = false)
        FILTER NOT EXISTS { ?atm atm:ejectsCard atm:CardEjected }
      }
    """ ] ;
    sh:targetClass :Transaction .
:UnsuccessfulTransactionShowsErrorShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If the transaction is not successful, an error message should be displayed." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type atm:Transaction ; atm:isSuccessful ?success .
        FILTER (?success = false)
        FILTER NOT EXISTS { ?atm atm:displaysState atm:ErrorMessage }
      }
    """ ] ;
    sh:targetClass :Transaction .
:ValidCardPasswordAccountShape rdf:type sh:NodeShape ;
    sh:sparql [ sh:message "If the cash card, password, and account are valid, the bank computer will send rdf:type message to the ATM indicating that everything is okay." ;
            sh:select """
      SELECT ?this WHERE {
        ?this rdf:type :ATM ; :hasCashCard ?card ; :hasAccount ?account .
        ?card :validCashCard ?vcc ; :validPassword ?vp .
        ?account :validAccount ?va .
        FILTER (?vcc = true && ?vp = true && ?va = true)
        FILTER NOT EXISTS { 
          ?bc rdf:type :BankComputer ; :sendsMessage :AccountOkMessage .
        }
      }
    """ ] ;
    sh:targetClass :ATM .
:amount rdf:type owl:DatatypeProperty ;
    rdfs:domain :Limit ;
    rdfs:range xsd:decimal .
:appliesToAccount rdf:type owl:ObjectProperty ;
    rdfs:domain :Limit ;
    rdfs:range :Account .
:authorizedBy rdf:type owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :Authorization .
:bankCode rdf:type owl:DatatypeProperty ;
    rdfs:domain :CashCard ;
    rdfs:range xsd:string .
:cardRejected rdf:type owl:DatatypeProperty ;
    rdfs:domain :ATM ;
    rdfs:range xsd:boolean .
:checksPassword rdf:type owl:ObjectProperty ;
    rdfs:domain :BankComputer ;
    rdfs:range :PasswordVerificationRequest .
:checksVerification rdf:type owl:ObjectProperty ;
    rdfs:domain :BankComputer ;
    rdfs:range :VerificationRequest .
:communicates rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM,
        :Bank ;
    rdfs:range :Message .
:communicatesWith rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :BankComputer .
:dispensedAmount rdf:type owl:DatatypeProperty ;
    rdfs:domain :Response,
        :Withdrawal ;
    rdfs:range xsd:decimal .
:displaysMessage rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :ErrorMessage .
:displaysState rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :DisplayState .
:ejectsCard rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :CashCard .
:handledBy rdf:type owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :ATM .
:handlesTransaction rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :Transaction .
:hasAccount rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM,
        :Customer ;
    rdfs:range :Account .
:hasBankCode rdf:type owl:DatatypeProperty ;
    rdfs:domain :CashCard,
        :VerificationRequest ;
    rdfs:range xsd:string .
:hasCashCard rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :CashCard .
:hasLimit rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM,
        :Bank ;
    rdfs:range :Limit .
:hasPassword rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM,
        :VerificationRequest ;
    rdfs:range :Password,
        xsd:string .
:hasPasswordValidation rdf:type owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :PasswordValidation .
:hasProblem rdf:type owl:DatatypeProperty ;
    rdfs:domain :Account ;
    rdfs:range xsd:boolean .
:hasResponse rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :Response .
:hasSerialNumber rdf:type owl:DatatypeProperty ;
    rdfs:domain :VerificationRequest ;
    rdfs:range xsd:string .
:indicatesBadPassword rdf:type owl:ObjectProperty ;
    rdfs:domain :Message ;
    rdfs:range :Password .
:invalidPassword rdf:type owl:Class ;
    rdfs:subClassOf :PasswordValidation .
:isSuccessful rdf:type owl:DatatypeProperty ;
    rdfs:domain :Transaction ;
    rdfs:range xsd:boolean .
:isValid rdf:type owl:DatatypeProperty ;
    rdfs:domain :CashCard,
        :VerificationRequest ;
    rdfs:range xsd:boolean .
:issuesCard rdf:type owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :CashCard .
:limitValue rdf:type owl:DatatypeProperty ;
    rdfs:domain :Limit ;
    rdfs:range xsd:decimal .
:maintainsAccount rdf:type owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Account .
:messageCode rdf:type owl:DatatypeProperty ;
    rdfs:domain :Message ;
    rdfs:range xsd:string .
:messageContent rdf:type owl:DatatypeProperty ;
    rdfs:domain :Message ;
    rdfs:range xsd:string .
:onAccount rdf:type owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :Account .
:operatedBy rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :Bank .
:ownsCard rdf:type owl:ObjectProperty ;
    rdfs:domain :Customer ;
    rdfs:range :CashCard .
:perDay rdf:type owl:DatatypeProperty ;
    rdfs:domain :Limit ;
    rdfs:range xsd:boolean .
:perMonth rdf:type owl:DatatypeProperty ;
    rdfs:domain :Limit ;
    rdfs:range xsd:boolean .
:performedBy rdf:type owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :Customer .
:processTransaction rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :TransactionRequest .
:processedBy rdf:type owl:ObjectProperty ;
    owl:inverseOf :processesTransaction .
:receivesMessage rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :Message .
:receivesRequest rdf:type owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Transaction .
:requestedAmount rdf:type owl:DatatypeProperty ;
    rdfs:domain :Transaction ;
    rdfs:range xsd:decimal .
:requestsVerification rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :VerificationRequest .
:responseTime rdf:type owl:DatatypeProperty ;
    rdfs:domain :BankComputer ;
    rdfs:range xsd:duration .
:sendsMessage rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM,
        :Bank,
        :BankComputer ;
    rdfs:range :Message .
:sendsRequest rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM ;
    rdfs:range :PasswordVerificationRequest,
        :Transaction .
:serialNumber rdf:type owl:DatatypeProperty ;
    rdfs:domain :CashCard ;
    rdfs:range xsd:string .
:transactionFailed rdf:type :Message .
:transactionStatus rdf:type owl:DatatypeProperty ;
    rdfs:domain :Transaction ;
    rdfs:range xsd:string .
:transactionSucceeded rdf:type owl:DatatypeProperty ;
    rdfs:domain :Transaction ;
    rdfs:range xsd:boolean .
:transactionTimestamp rdf:type owl:DatatypeProperty ;
    rdfs:domain :Transaction ;
    rdfs:range xsd:dateTime .
:usesCard rdf:type owl:ObjectProperty ;
    rdfs:domain :Transaction ;
    rdfs:range :CashCard .
:validAccount rdf:type owl:DatatypeProperty ;
    rdfs:domain :Account ;
    rdfs:range xsd:boolean .
:validBankCode rdf:type owl:DatatypeProperty ;
    rdfs:domain :CashCard ;
    rdfs:range xsd:boolean .
:validCard rdf:type owl:DatatypeProperty ;
    rdfs:domain :CashCard ;
    rdfs:range xsd:boolean .
:validCashCard rdf:type owl:DatatypeProperty ;
    rdfs:domain :CashCard ;
    rdfs:range xsd:boolean .
:validFor rdf:type owl:ObjectProperty ;
    rdfs:domain :PasswordVerificationRequest ;
    rdfs:range :CashCard .
:validPassword rdf:type owl:Class ;
    rdfs:domain :CashCard ;
    rdfs:range xsd:boolean ;
    rdfs:subClassOf :PasswordValidation .
:Authorization rdf:type owl:Class .
:TransactionRequest rdf:type owl:Class .
:displayDuration rdf:type owl:DatatypeProperty ;
    rdfs:domain :ErrorMessage ;
    rdfs:range xsd:integer .
:hasComputer rdf:type owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Computer .
:hasSoftware rdf:type owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Software .
:processesTransaction rdf:type owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Transaction .
:protects rdf:type owl:ObjectProperty ;
    rdfs:domain :Security ;
    rdfs:range owl:Class .
:providesSecurity rdf:type owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Security .
:updatesAccount rdf:type owl:ObjectProperty ;
    rdfs:domain :Withdrawal ;
    rdfs:range :Account .
:BankCode rdf:type owl:Class ;
    rdfs:subClassOf [ rdf:type owl:Restriction ;
            owl:hasValue true ;
            owl:onProperty :valid ],
        [ rdf:type owl:Restriction ;
            owl:hasValue false ;
            owl:onProperty :invalid ],
        [ rdf:type owl:Restriction ;
            owl:hasValue false ;
            owl:onProperty :valid ],
        [ rdf:type owl:Restriction ;
            owl:hasValue true ;
            owl:onProperty :invalid ] .
:Computer rdf:type owl:Class .
:Response rdf:type owl:Class .
:Software rdf:type owl:Class .
:acceptsWithdrawal rdf:type owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Withdrawal .
:invalid rdf:type owl:DatatypeProperty ;
    rdfs:domain :BankCode ;
    rdfs:range xsd:boolean .
:processesWithdrawal rdf:type owl:ObjectProperty ;
    rdfs:domain :Bank ;
    rdfs:range :Withdrawal .
:valid rdf:type owl:DatatypeProperty ;
    rdfs:domain [ owl:unionOf ( :CashCard :Password :Account ) ],
        :BankCode,
        :Password ;
    rdfs:range xsd:boolean .
:Customer rdf:type owl:Class .
:DisplayState rdf:type owl:Class .
:ErrorMessage rdf:type :DisplayState,
        owl:Class .
:PasswordValidation rdf:type owl:Class .
:PasswordVerificationRequest rdf:type owl:Class .
:Security rdf:type owl:Class .
:dispensesMoney rdf:type owl:ObjectProperty ;
    rdfs:domain :ATM,
        :Withdrawal ;
    rdfs:range :Account,
        :Withdrawal ;
    rdfs:subPropertyOf :updatesAccount .
:Password rdf:type owl:Class .
:BankComputer rdf:type owl:Class .
:Limit rdf:type owl:Class .
:VerificationRequest rdf:type owl:Class .
:Withdrawal rdf:type owl:Class ;
    rdfs:subClassOf :Transaction .
:Account rdf:type owl:Class .
:Message rdf:type owl:Class .
:Bank rdf:type owl:Class .
:CashCard rdf:type owl:Class .
:Transaction rdf:type owl:Class .
:ATM rdf:type owl:Class .
[] rdf:type owl:Restriction ;
    owl:onProperty :providesSecurity ;
    owl:someValuesFrom [ rdf:type owl:Class ;
            owl:intersectionOf ( :Security [ rdf:type owl:Restriction ;
                        owl:onProperty :protects ;
                        owl:someValuesFrom [ rdf:type owl:Class ;
                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                            owl:onProperty :hasComputer ;
                                            owl:someValuesFrom :Computer ] [ rdf:type owl:Restriction ;
                                            owl:onProperty :hasSoftware ;
                                            owl:someValuesFrom :Software ] ) ] ] ) ] .
[] rdf:first :dispensesMoney ;
    rdf:rest ( :processesWithdrawal :acceptsWithdrawal ) .
[] rdf:first :processesWithdrawal ;
    rdf:rest ( :acceptsWithdrawal ) .
