# 🧠 Σύνταξη Οντολογιών από Απαιτήσεις Λογισμικού

Το αποθετήριο αυτό υλοποιεί μια μικτή **νευρο-συμβολική** διαδικασία που μετατρέπει φυσικές γλώσσες απαιτήσεων σε οντολογίες OWL.  
Ο συνδυασμός της υπολογιστικής ισχύος μεγάλων γλωσσικών μοντέλων (LLMs) με κανόνες SHACL επιτρέπει την αυτόματη δημιουργία, επικύρωση και διόρθωση τριπλετών.

> Αναπτύχθηκε στο πλαίσιο μεταπτυχιακής διπλωματικής εργασίας στην Τεχνητή Νοημοσύνη.

---

## 📂 Δομή Αρχείων

```
Ontology-Guided/
├── data_loader.py           # Φόρτωση και προεπεξεργασία κειμένων
├── llm_interface.py         # Επικοινωνία με το LLM (π.χ. GPT-4)
├── ontology_builder.py      # Ενοποίηση Turtle σε αρχείο OWL/TTL
├── validator.py             # SHACL έλεγχος ορθότητας
├── repair_loop.py           # Επαναληπτική επιδιόρθωση με LLM
├── main.py                  # Ενοποιημένο pipeline
├── generate_examples.py     # Αυτόματη παραγωγή αρχείων στο results/
├── tests/                   # Βασικά unit tests με pytest
├── example_loader.py        # Παράδειγμα χρήσης DataLoader
├── example_llm.py           # Παράδειγμα κλήσης LLM
├── demo.txt                 # Δείγμα απαιτήσεων
├── shapes.ttl               # Κανόνες SHACL
├── results/                 # Παραγόμενα αρχεία (TTL/OWL)
├── requirements.txt         # Εξαρτήσεις Python
└── README                   # Το παρόν αρχείο
```

---

## 🚀 Γρήγορη Εκκίνηση

1. **Εγκατάσταση βιβλιοθηκών**
   ```bash
   python3 -m pip install -r requirements.txt
   python3 -m spacy download en_core_web_sm
   ```

2. **Ρύθμιση κλειδιού API**
   Δημιουργήστε αρχείο `.env` με την μεταβλητή `OPENAI_API_KEY` για να μπορεί το LLM να κληθεί.

3. **Εκτέλεση ενοποιημένου pipeline**
   ```bash
   python3 main.py --inputs demo.txt --shapes shapes.ttl --repair
   ```
   Το script διαβάζει τις απαιτήσεις, παράγει τα OWL triples, τρέχει τον
   έλεγχο SHACL και αν χρειαστεί εκτελεί αυτόματο βρόχο διόρθωσης.

4. **Αυτόματη δημιουργία παραδειγμάτων**
   ```bash
   python3 generate_examples.py
   ```
   Παράγει τα αρχεία `results/combined.ttl` και `results/combined.owl` από το `demo.txt`.
5. **Χειροκίνητη εκτέλεση επιμέρους βημάτων** (προαιρετικά)
   ```bash
   python3 example_llm.py         # παραγωγή αρχικών triples
   python3 ontology_builder.py    # συγχώνευση σε combined.ttl/owl
   python3 validator.py --data results/combined.ttl --shapes shapes.ttl
   python3 repair_loop.py         # εφόσον υπάρχουν παραβιάσεις
   ```

---

## 🔧 Εργαλεία
- **spaCy** για τμηματοποίηση προτάσεων
- **OpenAI API** για παραγωγή αρχικών τριπλετών
- **rdflib** και **OWLready2** για χειρισμό οντολογιών
- **pySHACL** για επικύρωση με κανόνες SHACL

---

## 📝 Άδεια Χρήσης
Διανέμεται υπό την άδεια MIT.
