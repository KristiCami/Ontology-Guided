Ορίστε το `README.md` **έτοιμο για copy-paste** με σωστή Markdown μορφοποίηση:

---

```markdown
# 🧠 Ontology-Guided Ontology Drafting from Software Requirements

This repository implements a **neuro-symbolic pipeline** for transforming natural language software requirements into machine-readable OWL ontologies. The approach combines **large language models (LLMs)** with **ontology engineering tools** for automated knowledge extraction, validation, and repair.

> 📘 Developed as part of a Master's thesis in Artificial Intelligence.

---

## 📌 Objectives

- Extract domain knowledge from unstructured requirement texts.
- Generate semantically valid OWL ontologies.
- Validate the ontologies using SHACL rules.
- Automatically repair violations and re-validate iteratively.

---

## ⚙️ Project Structure

```

Ontology-Guided/
├── OWL-Generation/
│   ├── llm\_pipeline\_openai.py     # LLM-based OWL triple generation
│   ├── ontology\_writer.py         # Writes triples to OWL format
│   └── ...
├── data\_loader.py                 # Loads and preprocesses data
├── test\_loader.py                 # Test script for data pipeline
├── validator.py                   # SHACL validation engine
├── repair\_loop.py                 # Auto-repair mechanism
├── requirements.txt               # Required Python dependencies
├── results/                       # Generated OWL files
├── shapes.ttl                     # SHACL rules for validation
└── README.md                      # This file

````

---

## 🚀 Quick Start

### 1. Clone the repository

```bash
git clone https://github.com/KristiCami/Ontology-Guided.git
cd Ontology-Guided
````

### 2. Install dependencies

```bash
python3 -m pip install -r requirements.txt
python3 -m spacy download en_core_web_sm
```

### 3. Run the pipeline

```bash
python3 data_loader.py
python3 test_loader.py
python3 validator.py --data results/combined.ttl --shapes shapes.ttl
python3 repair_loop.py
```

---

## 🧪 Example

Given a requirement like:

> “The ATM must log every user transaction before approval.”

The system can generate OWL triples such as:

```
Class: ATM
  SubClassOf: logs some Transaction

Class: Transaction
  SubClassOf: hasStatus some Approved
```

Then SHACL validates these triples against formal constraints.

---

## 🧰 Tools & Technologies

* 🧠 **spaCy** – for NLP preprocessing
* 🤖 **OpenAI API** – for LLM-based semantic interpretation
* 🧩 **OWLReady2**, **rdflib** – for ontology manipulation
* ✅ **pySHACL** – for SHACL validation
* 🔁 **Repair loop** – for iterative feedback and correction

---

## 📄 License

This project is licensed under the MIT License.

---

## 👩‍🎓 Author

Kristi Cami – [GitHub](https://github.com/KristiCami)

Part of a Master's thesis in Artificial Intelligence.

```

---

📌 Αν θέλεις και **δίγλωσση έκδοση με ελληνική σύνοψη**, πες μου να το προσαρμόσω αναλόγως.
```
