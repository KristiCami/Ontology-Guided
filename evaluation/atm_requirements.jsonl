{
    "title": "Functional requirement 1",
    "text": "If ATM is initialized with t dollars. k;m,n are entered | Initialize parameters t,k,m,n | Then Parameters are set.",
    "boilerplate": {
      "prefix": "If <System:ATM> is initialized with <Item:t>. <Item:k>,<Item:m>,<Item:n> are <State:entered>",
      "main": "<System:ATM> shall <Function:initialize> parameters <Item:t>,<Item:k>,<Item:m>,<Item:n>",
      "suffix": "Then parameters are <State:set>"
    },
    "boilerplate_type": "M1",
    "placeholders": [
    {
      "span": "ATM",
      "type": "System",
      "start": 3,
      "end": 6
    },
    {
      "span": "t",
      "type": "Item",
      "start": 30,
      "end": 31
    },
    {
      "span": "k",
      "type": "Item",
      "start": 34,
      "end": 35
    },
    {
      "span": "m",
      "type": "Item",
      "start": 36,
      "end": 37
    },
    {
      "span": "n",
      "type": "Item",
      "start": 38,
      "end": 39
    },
    {
      "span": "entered",
      "type": "State",
      "start": 48,
      "end": 55
    },
    {
      "span": "initialize",
      "type": "Function",
      "start": 59,
      "end": 69
    },
    {
      "span": "set",
      "type": "State",
      "start": 99,
      "end": 102
    }
    ],
    "shacl_validation": "pending",
    "meta": {
        "title": "Functional requirement 1",
        "description": "If ATM is initialized with t dollars and parameters k,m,n are entered, then parameters are set.",
        "input": "ATM, t, k, m, n",
        "processing": "Initialize",
        "output": "Parameters are set"
    },
    "axioms": {
      "tbox": [
        "@prefix ex:   <http://example.org/atm#> .",
        "@prefix owl:  <http://www.w3.org/2002/07/owl#> .",
        "@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .",
        "@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .",
        "",
        "ex:ATM a owl:Class .",
        "ex:Parameter a owl:Class .",
        "",
        "ex:hasParameter a owl:ObjectProperty ;",
        "  rdfs:domain ex:ATM ;",
        "  rdfs:range  ex:Parameter .",
        "",
        "ex:parametersSet a owl:DatatypeProperty ;",
        "  rdfs:domain ex:ATM ;",
        "  rdfs:range  xsd:boolean .",
        "",
        "# Optional: capture numeric value of a parameter (used for t being in dollars)",
        "ex:value a owl:DatatypeProperty ;",
        "  rdfs:domain ex:Parameter ;",
        "  rdfs:range  xsd:decimal ."
      ],
      "abox": [
        "@prefix ex: <http://example.org/atm#> .",
        "ex:t a ex:Parameter .",
        "ex:k a ex:Parameter .",
        "ex:m a ex:Parameter .",
        "ex:n a ex:Parameter ."
      ],
      "shacl": [
        "@prefix sh:  <http://www.w3.org/ns/shacl#> .",
        "@prefix ex:  <http://example.org/atm#> .",
        "@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .",
        "",
        "# Enforce exactly the four parameters {t,k,m,n} (no more, no less)",
        "ex:ATMExactParamsShape a sh:NodeShape ;",
        "  sh:targetClass ex:ATM ;",
        "  sh:property [",
        "    sh:path ex:hasParameter ;",
        "    sh:in ( ex:t ex:k ex:m ex:n ) ;",
        "    sh:minCount 4 ;",
        "    sh:maxCount 4",
        "  ] ;",
        "  sh:property [ sh:path ex:hasParameter ; sh:hasValue ex:t ] ;",
        "  sh:property [ sh:path ex:hasParameter ; sh:hasValue ex:k ] ;",
        "  sh:property [ sh:path ex:hasParameter ; sh:hasValue ex:m ] ;",
        "  sh:property [ sh:path ex:hasParameter ; sh:hasValue ex:n ] .",
        "",
        "# Require the postcondition parametersSet == true (exactly one boolean literal true)",
        "ex:ATMParametersSetShape a sh:NodeShape ;",
        "  sh:targetClass ex:ATM ;",
        "  sh:property [",
        "    sh:path ex:parametersSet ;",
        "    sh:datatype xsd:boolean ;",
        "    sh:hasValue true ;",
        "    sh:minCount 1 ;",
        "    sh:maxCount 1",
        "  ] .",
        "",
        "# Optional: data constraint for parameter t being a non-negative decimal amount",
        "ex:ParameterTShape a sh:NodeShape ;",
        "  sh:targetNode ex:t ;",
        "  sh:property [",
        "    sh:path ex:value ;",
        "    sh:datatype xsd:decimal ;",
        "    sh:minInclusive 0.0",
        "  ] ."
      ]
  }
}

{
    "title": "Functional requirement 2",
    "text": "If no cash card is in the ATM, the system should display initial display.",
    "boilerplate": {
        "prefix": "If no <Item:cash card> is in the <System:ATM>",
        "main": "<System:system> SHALL SET <Item:display>",
        "suffix": null
    },
    "placeholders": [
    {
      "span": "cash card",
      "type": "Item",
      "start": 6,
      "end": 15
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 26,
      "end": 29
    },
    {
      "span": "system",
      "type": "System",
      "start": 35,
      "end": 41
    },
    {
      "span": "display",
      "type": "Function",
      "start": 49,
      "end": 56
    },
    {
      "span": "display",
      "type": "Item",
      "start": 65,
      "end": 72
    }
    ],
    "boilerplate_type": "M1",
    "shacl_validation": "pending",
    "meta": {
    "title": "Functional requirement 2",
    "description": "If no cash card is in the ATM, the system should display initial display.",
    "input": "",
    "processing": "",
    "output": ""
    },
    "axioms": {
      "tbox": [
        "@prefix ex:   <http://example.org/atm#> .",
        "@prefix owl:  <http://www.w3.org/2002/07/owl#> .",
        "@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .",
        "",
        "ex:ATM a owl:Class .",
        "ex:CashCard a owl:Class .",
        "ex:DisplayState a owl:Class .",
        "",
        "ex:hasCashCard a owl:ObjectProperty ;",
        "  rdfs:domain ex:ATM ;",
        "  rdfs:range  ex:CashCard .",
        "",
        "ex:displaysState a owl:ObjectProperty ;",
        "  rdfs:domain ex:ATM ;",
        "  rdfs:range  ex:DisplayState ."
      ],
      "abox": [
        "@prefix ex: <http://example.org/atm#> .",
        "ex:InitialDisplay a ex:DisplayState ."
      ],
      "shacl": [
        "@prefix sh:  <http://www.w3.org/ns/shacl#> .",
        "@prefix ex:  <http://example.org/atm#> .",
        "",
        "# If no cash card is present in an ATM, it must display InitialDisplay.",
        "ex:NoCardShowsInitialShape a sh:NodeShape ;",
        "  sh:targetClass ex:ATM ;",
        "  sh:sparql [",
        "    sh:message \"If no cash card is present, ATM must display InitialDisplay.\" ;",
        "    sh:select \"\"\"",
        "      SELECT ?this WHERE {",
        "        ?this a ex:ATM .",
        "        FILTER NOT EXISTS { ?this ex:hasCashCard ?card . }",
        "        FILTER NOT EXISTS { ?this ex:displaysState ex:InitialDisplay . }",
        "      }",
        "    \"\"\"",
        "  ] ."
      ]
    }
}

{
  "title": "Functional requirement 3",
  "text": "If the ATM is running out of money, no card should be accepted. An error message is displayed.",
  "boilerplate": {
    "prefix": "IF <System:ATM> IS <State:running_out_of_money>",
    "main": "<System:ATM> SHALL NOT SET <Item:card> TO <StateValue:accepted>",
    "suffix": "SUBSEQUENTLY <System:ATM> SHALL PERFORM <Function:display_error_message>"
  },
  "boilerplate_type": "M1",
  "placeholders": [
    {
      "span": "ATM",
      "type": "System",
      "start": 7,
      "end": 10
    },
    {
      "span": "running out of money",
      "type": "State",
      "start": 14,
      "end": 35
    },
    {
      "span": "card",
      "type": "Item",
      "start": 40,
      "end": 44
    },
    {
      "span": "accepted",
      "type": "StateValue",
      "start": 60,
      "end": 68
    },
    {
      "span": "error message",
      "type": "Function",
      "start": 74,
      "end": 87
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "If the ATM is running out of money, no card should be accepted. An error message is displayed.",
    "input": "A card is entered.",
    "processing": "The amount of cash is less than t.",
    "output": "Display an error message. Return cash card.",
    "authorization": "The authorization starts after a customer has entered his card in the ATM."
  },
  "axioms": {
    "tbox": [
      "@prefix ex:   <http://example.org/atm#> .",
      "@prefix owl:  <http://www.w3.org/2002/07/owl#> .",
      "@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .",
      "@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .",
      "",
      "ex:ATM a owl:Class .",
      "ex:CashCard a owl:Class .",
      "ex:DisplayState a owl:Class .",
      "",
      "ex:hasCashCard a owl:ObjectProperty ;",
      "  rdfs:domain ex:ATM ;",
      "  rdfs:range  ex:CashCard .",
      "",
      "ex:displaysState a owl:ObjectProperty ;",
      "  rdfs:domain ex:ATM ;",
      "  rdfs:range  ex:DisplayState .",
      "",
      "# State & telemetry",
      "ex:acceptsCard a owl:DatatypeProperty ;",
      "  rdfs:domain ex:ATM ;",
      "  rdfs:range  xsd:boolean .",
      "",
      "ex:cashAvailable a owl:DatatypeProperty ;",
      "  rdfs:domain ex:ATM ;",
      "  rdfs:range  xsd:decimal .",
      "",
      "ex:runningOutOfMoney a owl:DatatypeProperty ;",
      "  rdfs:domain ex:ATM ;",
      "  rdfs:range  xsd:boolean ."
    ],
    "abox": [
      "@prefix ex: <http://example.org/atm#> .",
      "ex:ErrorDisplay a ex:DisplayState ."
    ],
    "shacl": [
      "@prefix sh:  <http://www.w3.org/ns/shacl#> .",
      "@prefix ex:  <http://example.org/atm#> .",
      "@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .",
      "",
      "# 1) If runningOutOfMoney == true, then acceptsCard MUST be false",
      "ex:RunningOutBlocksCardsShape a sh:NodeShape ;",
      "  sh:targetClass ex:ATM ;",
      "  sh:sparql [",
      "    sh:message \"When runningOutOfMoney=true, ATM must not accept cards.\" ;",
      "    sh:select \"\"\"",
      "      SELECT ?this WHERE {",
      "        ?this a ex:ATM ; ex:runningOutOfMoney ?rum .",
      "        FILTER (?rum = true)",
      "        FILTER NOT EXISTS { ?this ex:acceptsCard ?ac . FILTER (?ac = false) }",
      "      }",
      "    \"\"\"",
      "  ] .",
      "",
      "# 2) If runningOutOfMoney == true, then ATM must display ErrorDisplay",
      "ex:RunningOutShowsErrorShape a sh:NodeShape ;",
      "  sh:targetClass ex:ATM ;",
      "  sh:sparql [",
      "    sh:message \"When runningOutOfMoney=true, ATM must display ErrorDisplay.\" ;",
      "    sh:select \"\"\"",
      "      SELECT ?this WHERE {",
      "        ?this a ex:ATM ; ex:runningOutOfMoney ?rum .",
      "        FILTER (?rum = true)",
      "        FILTER NOT EXISTS { ?this ex:displaysState ex:ErrorDisplay }",
      "      }",
      "    \"\"\"",
      "  ] .",
      "",
      "# 3) Threshold-based variant: if cashAvailable < t.value then block cards and show error",
      "#    (assumes the ATM links to parameter ex:t via ex:hasParameter, and ex:t ex:value ?tval)",
      "ex:LowCashBlocksCardsShape a sh:NodeShape ;",
      "  sh:targetClass ex:ATM ;",
      "  sh:sparql [",
      "    sh:message \"If cashAvailable < t, ATM must not accept cards.\" ;",
      "    sh:select \"\"\"",
      "      SELECT ?this WHERE {",
      "        ?this a ex:ATM ; ex:cashAvailable ?bal .",
      "        OPTIONAL { ?this ex:hasParameter ex:t . ex:t ex:value ?tval . }",
      "        FILTER (bound(?tval) && (?bal < ?tval))",
      "        FILTER NOT EXISTS { ?this ex:acceptsCard ?ac . FILTER (?ac = false) }",
      "      }",
      "    \"\"\"",
      "  ] .",
      "",
      "ex:LowCashShowsErrorShape a sh:NodeShape ;",
      "  sh:targetClass ex:ATM ;",
      "  sh:sparql [",
      "    sh:message \"If cashAvailable < t, ATM must display ErrorDisplay.\" ;",
      "    sh:select \"\"\"",
      "      SELECT ?this WHERE {",
      "        ?this a ex:ATM ; ex:cashAvailable ?bal .",
      "        OPTIONAL { ?this ex:hasParameter ex:t . ex:t ex:value ?tval . }",
      "        FILTER (bound(?tval) && (?bal < ?tval))",
      "        FILTER NOT EXISTS { ?this ex:displaysState ex:ErrorDisplay }",
      "      }",
      "    \"\"\"",
      "  ] ."
    ]
  }
}

{
  "title": "Functional requirement 4",
  "text": "If Customer enters the cash card, the ATM must check if it is a valid cash card. If not, it must display an error and return the card.",
  "boilerplate": {
    "prefix": "IF <Actor:Customer> ENTERS <Item:cash_card>",
    "main": "<System:ATM> SHALL SET <Item:cash_card> TO <StateValue:valid>",
    "suffix": "OTHERWISE <System:ATM> SHALL PERFORM <Function:display_error_message> AND RETURN <Item:cash_card>"
  },
  "type": "M1",
  "placeholders": [
    {
      "span": "Customer",
      "type": "Actor",
      "start": 3,
      "end": 11
    },
    {
      "span": "cash card",
      "type": "Item",
      "start": 23,
      "end": 32
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 40,
      "end": 43
    },
    {
      "span": "check",
      "type": "Function",
      "start": 51,
      "end": 56
    },
    {
      "span": "valid",
      "type": "StateValue",
      "start": 82,
      "end": 87
    },
    {
      "span": "Display",
      "type": "Function",
      "start": 106,
      "end": 113
    },
    {
      "span": "error message",
      "type": "Item",
      "start": 114,
      "end": 127
    },
    {
      "span": "cash card",
      "type": "Item",
      "start": 139,
      "end": 148
    },
    {
      "span": "invalid",
      "type": "StateValue",
      "start": 158,
      "end": 165
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "The ATM checks if the entered card is valid. If not, it displays an error message and returns the card.",
    "input": "Customer enters the cash card.",
    "processing": "Check if it is a valid cash card (readable, not expired).",
    "output": "Display error message and return cash card if invalid."
  }
}

{
    "title": "Functional requirement 5",
    "text": "If the cash card is valid, the ATM should read the serial number and bank code.",
    "boilerplate": {
    "prefix": "IF <Item:cash_card> IS <StateValue:valid>",
    "main": "<System:ATM> SHALL SEND <Item:serial_number> AND <Item:bank_code>",
    "suffix": "THEN <System:ATM> SHALL INITIATE <Function:authorization_dialog>"
    },
    "type": "M3",
    "placeholders": [
    {
      "span": "cash card",
      "type": "Item",
      "start": 9,
      "end": 18
    },
    {
      "span": "valid",
      "type": "StateValue",
      "start": 42,
      "end": 47
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 53,
      "end": 56
    },
    {
      "span": "serial number",
      "type": "Item",
      "start": 73,
      "end": 86
    },
    {
      "span": "bank code",
      "type": "Item",
      "start": 91,
      "end": 100
    },
    {
      "span": "authorization dialog",
      "type": "Function",
      "start": 111,
      "end": 133
    }
    ],
    "shacl_validation": "pending",
    "meta": {
    "description": "If the cash card is valid, the ATM should read the serial number and bank code.",
    "input": "Valid cash card.",
    "processing": "Read the serial number and bank code.",
    "output": "Initiate authorization dialog."
    }
}

{
  "title": "Functional requirement 6",
  "text": "If the serial number is retrieved from the cash card, the serial number should be logged. Then update the log file.",
  "boilerplate_type": "M8",
  "boilerplate": {
    "prefix": "IF <Item:Serial number> FROM <Item:cash card>",
    "main": "<Function:log> <Item:serial number>",
    "suffix": "THEN <Function:Update> <Item:log file>"
  },
  "placeholders": [
    {
      "span": "Serial number",
      "type": "Item",
      "start": 7,
      "end": 20
    },
    {
      "span": "cash card",
      "type": "Item",
      "start": 40,
      "end": 49
    },
    {
      "span": "serial number",
      "type": "Item",
      "start": 55,
      "end": 68
    },
    {
      "span": "log",
      "type": "Function",
      "start": 81,
      "end": 84
    },
    {
      "span": "Update",
      "type": "Function",
      "start": 91,
      "end": 97
    },
    {
      "span": "log file",
      "type": "Item",
      "start": 105,
      "end": 113
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "The ATM should log the serial number retrieved from the cash card and then update the log file.",
    "input": "Serial number from cash card.",
    "processing": "Log the serial number.",
    "output": "Log file is updated."
  }
}

{
  "title": "Functional requirement 7",
  "text": "Authorization dialog: The user is requested to enter his password. The ATM verifies the bank code and password with the bank computer.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF <Item:password> FROM <Actor:user> AND <Item:bank code> FROM <Item:cash card>",
    "main": "<System:ATM> SHALL <Function:verify> <Item:password> AND <Item:bank code> WITH <System:bank computer>",
    "suffix": "THEN <System:ATM> SHALL <Function:accept> OR <Function:reject> <Item:authorization>"
  },
  "placeholders": [
    {
      "span": "password",
      "type": "Item",
      "start": 49,
      "end": 57
    },
    {
      "span": "user",
      "type": "Actor",
      "start": 42,
      "end": 46
    },
    {
      "span": "bank code",
      "type": "Item",
      "start": 73,
      "end": 82
    },
    {
      "span": "cash card",
      "type": "Item",
      "start": 88,
      "end": 97
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 63,
      "end": 66
    },
    {
      "span": "verify",
      "type": "Function",
      "start": 71,
      "end": 77
    },
    {
      "span": "bank computer",
      "type": "System",
      "start": 95,
      "end": 108
    },
    {
      "span": "accept",
      "type": "Function",
      "start": 117,
      "end": 123
    },
    {
      "span": "reject",
      "type": "Function",
      "start": 128,
      "end": 134
    },
    {
      "span": "authorization",
      "type": "Item",
      "start": 135,
      "end": 148
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "The ATM verifies the user's password and bank code with the bank computer.",
    "input": "Password from user, bank code from cash card.",
    "processing": "Send serial number and password to bank computer, receive response from bank.",
    "output": "Accept or reject authorization from bank."
  }
}

{
  "title": "Functional requirement 8",
  "text": "If the ATM receives a bad password, bad bank code, or bad account from the bank computer during authorization, then the card is ejected and an error message is displayed.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF <System:ATM> RECEIVES <StateValue:bad password> OR <StateValue:bad bank code> OR <StateValue:bad account> FROM <System:bank computer>",
    "main": "<System:ATM> SHALL <Function:eject> <Item:card>",
    "suffix": "THEN <System:ATM> SHALL <Function:display> <Item:error message>"
  },
  "placeholders": [
    {
      "span": "ATM",
      "type": "System",
      "start": 7,
      "end": 10
    },
    {
      "span": "bad password",
      "type": "StateValue",
      "start": 24,
      "end": 36
    },
    {
      "span": "bad bank code",
      "type": "StateValue",
      "start": 41,
      "end": 55
    },
    {
      "span": "bad account",
      "type": "StateValue",
      "start": 59,
      "end": 70
    },
    {
      "span": "bank computer",
      "type": "System",
      "start": 80,
      "end": 93
    },
    {
      "span": "card",
      "type": "Item",
      "start": 121,
      "end": 125
    },
    {
      "span": "ejected",
      "type": "Function",
      "start": 113,
      "end": 120
    },
    {
      "span": "error message",
      "type": "Item",
      "start": 154,
      "end": 167
    },
    {
      "span": "displayed",
      "type": "Function",
      "start": 171,
      "end": 180
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "Different negative answers from bank computer for authorization dialog.",
    "input": "Response from bank or authorization dialog: bad password, bad bank code, bad account.",
    "processing": "If the ATM gets any of these messages from the bank computer, the card will be ejected and the user will get the relevant error message.",
    "output": "Card is ejected and error message is displayed."
  }
}

{
  "title": "Functional requirement 9",
  "text": "If the ATM receives acceptance from the bank computer during the authorization process, and both the password and serial number are valid, then the system shall start the transaction dialog.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF <System:ATM> RECEIVES <StateValue:accepted> FROM <System:bank computer> DURING <Function:authorization process>",
    "main": "IF <Item:password> AND <Item:serial number> ARE <StateValue:valid>",
    "suffix": "THEN <System:ATM> SHALL <Function:start> <Item:transaction dialog>"
  },
  "placeholders": [
    {
      "span": "ATM",
      "type": "System",
      "start": 7,
      "end": 10
    },
    {
      "span": "accepted",
      "type": "StateValue",
      "start": 29,
      "end": 37
    },
    {
      "span": "bank computer",
      "type": "System",
      "start": 43,
      "end": 56
    },
    {
      "span": "authorization process",
      "type": "Function",
      "start": 65,
      "end": 86
    },
    {
      "span": "password",
      "type": "Item",
      "start": 92,
      "end": 100
    },
    {
      "span": "serial number",
      "type": "Item",
      "start": 105,
      "end": 118
    },
    {
      "span": "valid",
      "type": "StateValue",
      "start": 124,
      "end": 129
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 137,
      "end": 140
    },
    {
      "span": "start",
      "type": "Function",
      "start": 152,
      "end": 157
    },
    {
      "span": "transaction dialog",
      "type": "Item",
      "start": 158,
      "end": 176
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "If password and serial number are valid, the authorization process is finished.",
    "input": "The ATM receives acceptance from the bank computer during authorization.",
    "processing": "Authorization finishes successfully.",
    "output": "Start transaction dialog."
  }
}

{
  "title": "Functional requirement 10",
  "text": "If a card is entered more than three times in a row at any ATM and the password is wrong each time, the ATM keeps the card. A message is displayed instructing the customer to call the bank.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF <Item:password> IS <StateValue:wrong> MORE_THAN 3 TIMES",
    "main": "<System:ATM> SHALL KEEP <Item:card> ALSO <System:ATM> SHALL DISPLAY <Item:message>",
    "suffix": "THEN <Actor:customer> SHALL CONTACT <Environment:bank>"
  },
  "placeholders": [
    {
      "span": "password",
      "type": "Item",
      "start": 3,
      "end": 11
    },
    {
      "span": "wrong",
      "type": "StateValue",
      "start": 15,
      "end": 20
    },
    {
      "span": "succession",
      "type": "StateValue",
      "start": 46,
      "end": 56
    },
    {
      "span": "card",
      "type": "Item",
      "start": 61,
      "end": 65
    },
    {
      "span": "entered",
      "type": "State",
      "start": 69,
      "end": 76
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 104,
      "end": 107
    },
    {
      "span": "password",
      "type": "Item",
      "start": 113,
      "end": 121
    },
    {
      "span": "wrong",
      "type": "StateValue",
      "start": 125,
      "end": 130
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 158,
      "end": 161
    },
    {
      "span": "card",
      "type": "Item",
      "start": 175,
      "end": 179
    },
    {
      "span": "display",
      "type": "Function",
      "start": 185,
      "end": 192
    },
    {
      "span": "message",
      "type": "Item",
      "start": 196,
      "end": 203
    },
    {
      "span": "customer",
      "type": "Actor",
      "start": 214,
      "end": 222
    },
    {
      "span": "bank",
      "type": "Environment",
      "start": 234,
      "end": 238
    },
    {
      "span": "Display",
      "type": "Function",
      "start": 247,
      "end": 254
    },
    {
      "span": "error message",
      "type": "Item",
      "start": 255,
      "end": 268
    },
    {
      "span": "customer",
      "type": "Actor",
      "start": 278,
      "end": 286
    },
    {
      "span": "bank",
      "type": "Environment",
      "start": 303,
      "end": 307
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "If a card is entered more than three times at any ATM and the password is wrong each time, the ATM keeps the card and displays a message to call the bank.",
    "input": "Entering a wrong password for the fourth time in succession",
    "processing": "Initiate authorization process. Response from bank computer is to keep the card.",
    "output": "Display error message that the customer should call the bank"
  }
}

{
  "title": "Functional requirement 11",
  "text": "If authorization is successfully completed. Then the ATM displays the amount of money to be dispensed and initiates the withdrawal sequence.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF <Function:authorization> IS <StateValue:successful>",
    "main": "<System:ATM> SHALL SET <Item:money> TO <StateValue:to_be_dispensed>",
    "suffix": "CONCURRENTLY_WITH <Function:withdraw>"
  },
  "placeholders": [
    {
      "span": "authorization",
      "type": "Function",
      "start": 3,
      "end": 16
    },
    {
      "span": "successful",
      "type": "StateValue",
      "start": 21,
      "end": 31
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 42,
      "end": 45
    },
    {
      "span": "money",
      "type": "Item",
      "start": 66,
      "end": 71
    },
    {
      "span": "to be dispensed",
      "type": "StateValue",
      "start": 75,
      "end": 91
    },
    {
      "span": "withdraw",
      "type": "Function",
      "start": 123,
      "end": 131
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "Successful authorization triggers money dispensing.",
    "input": "Authorization successfully completed.",
    "processing": "ATM prepares to dispense amount.",
    "output": "Money to be dispensed is displayed and withdrawal sequence begins."
  }
}

{
  "title": "Functional requirement 12",
  "text": "If the customer has entered the amount of money and the amount exceeds the transaction limit, the transaction is canceled and the transaction dialog is restarted.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF <Actor:customer> HAS <State:entered> <Item:money>",
    "main": "IF <Item:money> EXCEEDS <Item:transaction_limit> THEN <Function:cancel> <Item:transaction>",
    "suffix": "THEN RESTART <Function:transaction_dialog>"
  },
  "placeholders": [
    {
      "span": "customer",
      "type": "Actor",
      "start": 7,
      "end": 15
    },
    {
      "span": "entered",
      "type": "State",
      "start": 20,
      "end": 27
    },
    {
      "span": "money",
      "type": "Item",
      "start": 42,
      "end": 47
    },
    {
      "span": "money",
      "type": "Item",
      "start": 52,
      "end": 57
    },
    {
      "span": "transaction_limit",
      "type": "Item",
      "start": 67,
      "end": 84
    },
    {
      "span": "cancel",
      "type": "Function",
      "start": 91,
      "end": 97
    },
    {
      "span": "transaction",
      "type": "Item",
      "start": 98,
      "end": 109
    },
    {
      "span": "transaction_dialog",
      "type": "Function",
      "start": 124,
      "end": 143
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "Handle transaction restart when amount exceeds transaction policy.",
    "input": "Customer has entered the amount of money.",
    "processing": "Error if the amount is greater than m.",
    "output": "Restart transaction dialog if the amount is not within the transaction policy."
  }
}

{
  "title": "Functional Requirement 13",
  "text": "If the initial <Function:withdrawal> sequence is <StateValue:successful>, the <System:ATM> shall set the <Item:transaction> to <StateValue:initiated>. Then wait for a response from the <System:bank computer>.",
  "boilerplate": {
    "prefix": "IF the initial <Function:withdrawal> sequence IS <StateValue:successful>",
    "main": "<System:ATM> SHALL SET <Item:transaction> TO <StateValue:initiated>",
    "suffix": "THEN wait for a response from the <System:bank computer>"
  },
  "placeholders": [
    {
      "span": "withdrawal",
      "type": "Function",
      "start": 16,
      "end": 26
    },
    {
      "span": "successful",
      "type": "StateValue",
      "start": 38,
      "end": 48
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 54,
      "end": 57
    },
    {
      "span": "transaction",
      "type": "Item",
      "start": 76,
      "end": 87
    },
    {
      "span": "initiated",
      "type": "StateValue",
      "start": 92,
      "end": 101
    },
    {
      "span": "bank computer",
      "type": "System",
      "start": 132,
      "end": 145
    }
  ],
  "meta": {
    "title": "Functional Requirement 13",
    "description": "ATM sets the transaction to initiated if the withdrawal sequence was successful.",
    "input": "Initial withdrawal sequence is successful",
    "processing": "ATM sets transaction to initiated",
    "output": "Wait for response from the bank computer"
  },
  "shacl_validation": "pending"
}

{
  "title": "Functional Requirement 14",
  "text": "If the <System:ATM> receives a <Flow:message> that the <Item:transaction> has <StateValue:succeeded> from the <System:bank computer>, the <System:ATM> shall <Function:dispense> the <Item:money>. Then, after the <Actor:Customer> has taken the <Item:card>, the <System:ATM> shall <Function:dispense> the <Item:money>.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF the <System:ATM> RECEIVES <Flow:message> THAT <Item:transaction> HAS <StateValue:succeeded> FROM <System:bank computer>",
    "main": "<System:ATM> SHALL <Function:dispense> <Item:money>",
    "suffix": "THEN AFTER <Actor:Customer> HAS TAKEN <Item:card>, <System:ATM> SHALL <Function:dispense> <Item:money>"
  },
  "placeholders": [
    {
      "span": "ATM",
      "type": "System",
      "start": 8,
      "end": 11
    },
    {
      "span": "message",
      "type": "Flow",
      "start": 24,
      "end": 31
    },
    {
      "span": "transaction",
      "type": "Item",
      "start": 42,
      "end": 53
    },
    {
      "span": "succeeded",
      "type": "StateValue",
      "start": 58,
      "end": 67
    },
    {
      "span": "bank computer",
      "type": "System",
      "start": 74,
      "end": 87
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 93,
      "end": 96
    },
    {
      "span": "dispense",
      "type": "Function",
      "start": 103,
      "end": 111
    },
    {
      "span": "money",
      "type": "Item",
      "start": 116,
      "end": 121
    },
    {
      "span": "Customer",
      "type": "Actor",
      "start": 145,
      "end": 153
    },
    {
      "span": "card",
      "type": "Item",
      "start": 171,
      "end": 175
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 182,
      "end": 185
    },
    {
      "span": "dispense",
      "type": "Function",
      "start": 192,
      "end": 200
    },
    {
      "span": "money",
      "type": "Item",
      "start": 205,
      "end": 210
    }
  ],
  "meta": {
    "description": "If the transaction succeeds, the ATM dispenses money.",
    "input": "ATM receives message that transaction succeeded from the bank computer.",
    "processing": "ATM prints receipt, updates t, and ejects the card. Customer should take the card.",
    "output": "After the Customer has taken the card, the ATM dispenses the money."
  },
  "shacl_validation": "pending"
}

{
  "title": "Functional requirement 15",
  "text": "If the number of $20 bills requested is dispensed to the customer, and the money is dispensed, then the amount is logged together with the serial number, and a response is sent to the bank for the money dispensed.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF THE NUMBER OF $20 BILLS REQUESTED IS <Function:dispense>D TO THE <Actor:customer> AND THE <Item:money> IS <Function:dispense>D",
    "main": "THE AMOUNT IS <Function:log>GED",
    "suffix": "TOGETHER WITH THE <Item:serial number>. RESPONSE SENT TO THE <Environment:bank> FOR <Item:money> <Function:dispense>D"
  },
  "placeholders": [
    {
      "span": "dispense",
      "type": "Function",
      "start": 38,
      "end": 46
    },
    {
      "span": "customer",
      "type": "Actor",
      "start": 54,
      "end": 62
    },
    {
      "span": "money",
      "type": "Item",
      "start": 74,
      "end": 79
    },
    {
      "span": "dispense",
      "type": "Function",
      "start": 83,
      "end": 91
    },
    {
      "span": "log",
      "type": "Function",
      "start": 117,
      "end": 120
    },
    {
      "span": "serial number",
      "type": "Item",
      "start": 144,
      "end": 157
    },
    {
      "span": "bank",
      "type": "Environment",
      "start": 185,
      "end": 189
    },
    {
      "span": "money",
      "type": "Item",
      "start": 199,
      "end": 204
    },
    {
      "span": "dispense",
      "type": "Function",
      "start": 205,
      "end": 213
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 15",
    "description": "If the money is dispensed, the amount is logged.",
    "input": "The number of $20 bills requested is dispensed to the customer.",
    "processing": "Log the amount of money against the serial number of the card.",
    "output": "Amount logged together with the serial number. Response sent to bank for money dispensed."
  }
}

{
  "title": "Functional requirement 16",
  "text": "If the transaction is not successful, an error message should be displayed and the card should be ejected.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF <System:ATM> GETS <Flow:message> “<Item:transaction> NOT <StateValue:success>FUL” FROM THE <System:bank computer>",
    "main": "THE <Item:transaction> IS NOT <StateValue:success>FUL → <Item:error message> SHOULD BE <Function:display>ED AND <Item:card> SHOULD BE <Function:eject>ED",
    "suffix": "THEN <Function:eject> <Item:card> AND <System:bank computer> RECEIVES <Flow:request> FROM <System:ATM> TO <Function:verify> <Item:account>"
  },
  "placeholders": [
    { "span": "ATM", "type": "System", "start": 3, "end": 6 },
    { "span": "message", "type": "Flow", "start": 12, "end": 19 },
    { "span": "transaction", "type": "Item", "start": 21, "end": 32 },
    { "span": "success", "type": "StateValue", "start": 37, "end": 44 },
    { "span": "bank computer", "type": "System", "start": 58, "end": 71 },
    { "span": "error message", "type": "Item", "start": 135, "end": 148 },
    { "span": "display", "type": "Function", "start": 159, "end": 166 },
    { "span": "card", "type": "Item", "start": 174, "end": 178 },
    { "span": "eject", "type": "Function", "start": 189, "end": 194 },
    { "span": "request", "type": "Flow", "start": 284, "end": 291 },
    { "span": "account", "type": "Item", "start": 314, "end": 321 },
    { "span": "verify", "type": "Function", "start": 303, "end": 309 }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 16",
    "description": "If the transaction is not successful, an error message should be displayed and the card should be ejected.",
    "input": "ATM gets message “transaction not successful” from the bank computer.",
    "processing": "ATM displays error message. Dialog: Customer should take the card.",
    "output": "Eject card and forward request to bank computer to verify account."
  }
}

{
  "title": "Functional requirement 1",
  "text": "If the ATM requests verification of the card (serial number and password), the bank computer checks if the bank code is valid. A bank code is valid if the cash card was issued by the bank. Then, a valid or invalid bank code is returned.",
  "boilerplate_type": "M1",
  "boilerplate": {
    "prefix": "IF <System:ATM> <Function:request>S <Function:verify> <Item:card> (<Item:Serial number> AND <Item:password>)",
    "main": "THE <System:bank computer> SHALL CHECK IF <Item:bank code> IS <State:valid>, AND A <Item:bank code> IS <State:valid> IF THE <Item:cash card> WAS ISSUED BY THE <Environment:bank>",
    "suffix": "THEN <Item:bank code> SHALL BE <State:valid> OR <State:invalid>"
  },
  "placeholders": [
    { "span": "ATM", "type": "System" },
    { "span": "request", "type": "Function" },
    { "span": "verify", "type": "Function" },
    { "span": "card", "type": "Item" },
    { "span": "Serial number", "type": "Item" },
    { "span": "password", "type": "Item" },
    { "span": "bank computer", "type": "System" },
    { "span": "bank code", "type": "Item" },
    { "span": "valid", "type": "State" },
    { "span": "cash card", "type": "Item" },
    { "span": "bank", "type": "Environment" },
    { "span": "invalid", "type": "State" }
  ],
  "shacl_validation": "pending",
  "meta": {
    "description": "The bank computer checks if the bank code is valid. A bank code is valid if the cash card was issued by the bank.",
    "input": "ATM requests verification of card (serial number and password)",
    "processing": "Check if the bank code is valid",
    "output": "Valid or invalid bank code"
  }
}

{
  "title": "Functional requirement 2",
  "text": "If the bank code is invalid, the bank computer shall send the message 'bad bank code' to the ATM.",
  "boilerplate": {
    "prefix": "If <Item:bank code> IS <State:invalid>",
    "main": "<System:bank computer> SHALL SEND <Flow:message> TO <System:ATM>",
    "suffix": "The <Flow:message> SHALL BE <Item:bank code> ‘bad’"
  },
  "placeholders": [
    {
      "span": "bank code",
      "type": "Item",
      "start": 7,
      "end": 16
    },
    {
      "span": "invalid",
      "type": "State",
      "start": 20,
      "end": 27
    },
    {
      "span": "bank computer",
      "type": "System",
      "start": 33,
      "end": 46
    },
    {
      "span": "send",
      "type": "Function",
      "start": 53,
      "end": 57
    },
    {
      "span": "message",
      "type": "Flow",
      "start": 62,
      "end": 69
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 78,
      "end": 81
    },
    {
      "span": "bank code",
      "type": "Item",
      "start": 106,
      "end": 115
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 2",
    "description": "If it is not a valid bank code, the bank computer shall send a message to the ATM.",
    "input": "Invalid bank code",
    "processing": "Process message",
    "output": "The bank computer sends the message ‘bad bank code’ to the ATM."
  }
}

{
  "title": "Functional requirement 3",
  "text": "If the ATM sends a request to verify the password, the bank computer shall check if the password is valid for a valid cash card. Then the result is either a valid or invalid password.",
  "boilerplate": {
    "prefix": "IF REQUEST FROM <System:ATM> TO <Function:verify> <Item:password>",
    "main": "<System:bank computer> SHALL CHECK IF <Item:password> IS <State:valid> FOR A <State:valid> <Item:cash card>",
    "suffix": "THEN <Item:password> IS <State:valid> OR <State:invalid>"
  },
  "placeholders": [
    {
      "span": "ATM",
      "type": "System",
      "start": 23,
      "end": 26
    },
    {
      "span": "verify",
      "type": "Function",
      "start": 47,
      "end": 53
    },
    {
      "span": "password",
      "type": "Item",
      "start": 58,
      "end": 66
    },
    {
      "span": "bank computer",
      "type": "System",
      "start": 76,
      "end": 89
    },
    {
      "span": "check",
      "type": "Function",
      "start": 97,
      "end": 102
    },
    {
      "span": "password",
      "type": "Item",
      "start": 106,
      "end": 114
    },
    {
      "span": "valid",
      "type": "State",
      "start": 118,
      "end": 123
    },
    {
      "span": "valid",
      "type": "State",
      "start": 132,
      "end": 137
    },
    {
      "span": "cash card",
      "type": "Item",
      "start": 138,
      "end": 147
    },
    {
      "span": "password",
      "type": "Item",
      "start": 167,
      "end": 175
    },
    {
      "span": "valid",
      "type": "State",
      "start": 179,
      "end": 184
    },
    {
      "span": "invalid",
      "type": "State",
      "start": 188,
      "end": 195
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 3",
    "description": "The bank computer checks if the password is valid for a valid cash card.",
    "input": "Request from the ATM to verify password",
    "processing": "Check password of the customer",
    "output": "Valid or invalid password"
  }
}

{
  "title": "Functional requirement 4",
  "text": "If the password is invalid, the bank computer shall send a message to the ATM indicating a bad password.",
  "boilerplate": {
    "prefix": "IF <Item:password> IS <State:invalid>",
    "main": "<System:bank computer> SHALL <Function:send> <Flow:message> TO <System:ATM>",
    "suffix": "THE <Flow:message> SHALL INDICATE <Item:password> IS <State:invalid>"
  },
  "boilerplate_type": "M3",
  "placeholders": [
    {
      "span": "password",
      "type": "Item",
      "start": 6,
      "end": 14
    },
    {
      "span": "invalid",
      "type": "State",
      "start": 18,
      "end": 25
    },
    {
      "span": "bank computer",
      "type": "System",
      "start": 31,
      "end": 44
    },
    {
      "span": "send",
      "type": "Function",
      "start": 52,
      "end": 56
    },
    {
      "span": "message",
      "type": "Flow",
      "start": 57,
      "end": 64
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 68,
      "end": 71
    },
    {
      "span": "message",
      "type": "Flow",
      "start": 77,
      "end": 84
    },
    {
      "span": "password",
      "type": "Item",
      "start": 101,
      "end": 109
    },
    {
      "span": "invalid",
      "type": "State",
      "start": 113,
      "end": 120
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 4",
    "description": "If the password is invalid, the bank computer sends a message to the ATM.",
    "input": "Invalid password",
    "processing": "Process message. Update count for invalid password for the account.",
    "output": "The bank computer sends the message 'bad password' to the ATM."
  }
}

{
    "title": "Functional requirement 5",
    "text": "If Valid cash card and password | If it is a valid cash card and a valid password but there are problems with the account, the bank will send a message to the ATM that there are problems. | Then The bank sends “bad account” to the ATM.",
    "boilerplate": {
        "prefix": "If <State:Valid> <Item:cash card> and <State:Valid> <Item:password>",
        "main": "If the <Item:cash card> and the <Item:password> are <State:valid>, but there are problems with the account, the <Environment:bank> will <Function:send> a <Flow:message> to the <System:ATM>.",
        "suffix": "Then the <Environment:bank> <Function:send>s the <Flow:message> “<StateValue:bad account>” to the <System:ATM>."
    },
    "boilerplate_type": "M3",
    "placeholders": [
        {
            "span": "Valid",
            "type": "State",
            "start": 3,
            "end": 8
        },
        {
            "span": "cash card",
            "type": "Item",
            "start": 9,
            "end": 18
        },
        {
            "span": "password",
            "type": "Item",
            "start": 23,
            "end": 31
        },
        {
            "span": "valid",
            "type": "State",
            "start": 45,
            "end": 50
        },
        {
            "span": "cash card",
            "type": "Item",
            "start": 51,
            "end": 60
        },
        {
            "span": "valid",
            "type": "State",
            "start": 67,
            "end": 72
        },
        {
            "span": "password",
            "type": "Item",
            "start": 73,
            "end": 81
        },
        {
            "span": "bank",
            "type": "Environment",
            "start": 127,
            "end": 131
        },
        {
            "span": "send",
            "type": "Function",
            "start": 137,
            "end": 141
        },
        {
            "span": "message",
            "type": "Flow",
            "start": 144,
            "end": 151
        },
        {
            "span": "ATM",
            "type": "System",
            "start": 159,
            "end": 162
        },
        {
            "span": "bank",
            "type": "Environment",
            "start": 199,
            "end": 203
        },
        {
            "span": "send",
            "type": "Function",
            "start": 204,
            "end": 208
        },
        {
            "span": "bad account",
            "type": "StateValue",
            "start": 211,
            "end": 222
        },
        {
            "span": "ATM",
            "type": "System",
            "start": 231,
            "end": 234
        }
    ],
    "shacl_validation": "pending",
    "meta": {
        "title": "Functional requirement 5",
        "description": "If the cash card and the password are both valid, but there are problems with the account, the bank will send a message to the ATM.",
        "input": "Valid cash card and password",
        "processing": "Process message",
        "output": "The bank sends “bad account” to the ATM."
    }
}

{
  "title": "Functional requirement 6",
  "text": "If the cash card, password, and account are valid | If it is a valid cash card, a valid password, and there are no problems with the account, the bank computer will send a message to the ATM indicating that everything is okay | Then send “account ok” to the ATM. Transaction: the bank computer receives a request to process a transaction from the ATM.",
  "boilerplate": {
    "prefix": "If <State:Valid> <Item:cash card>, <Item:password>, and <Item:account>",
    "main": "If it is a <State:valid> <Item:cash card>, a <State:valid> <Item:password>, and there are no problems with the account, the <System:bank computer> will <Function:send> a <Flow:message> to the <System:ATM> indicating everything is <StateValue:ok>.",
    "suffix": "Then <Function:send> “account <StateValue:ok>” to the <System:ATM>. <Item:Transaction>: the <System:bank computer> receives a request to <Function:process> a <Item:transaction> from the <System:ATM>."
  },
  "placeholders": [
    { "span": "Valid", "type": "State", "start": 3, "end": 8 },
    { "span": "cash card", "type": "Item", "start": 9, "end": 18 },
    { "span": "password", "type": "Item", "start": 20, "end": 28 },
    { "span": "valid", "type": "State", "start": 54, "end": 59 },
    { "span": "cash card", "type": "Item", "start": 60, "end": 69 },
    { "span": "valid", "type": "State", "start": 73, "end": 78 },
    { "span": "password", "type": "Item", "start": 79, "end": 87 },
    { "span": "bank computer", "type": "System", "start": 135, "end": 148 },
    { "span": "send", "type": "Function", "start": 154, "end": 158 },
    { "span": "message", "type": "Flow", "start": 161, "end": 168 },
    { "span": "ATM", "type": "System", "start": 176, "end": 179 },
    { "span": "ok", "type": "StateValue", "start": 199, "end": 201 },
    { "span": "Send", "type": "Function", "start": 209, "end": 213 },
    { "span": "ok", "type": "StateValue", "start": 223, "end": 225 },
    { "span": "ATM", "type": "System", "start": 234, "end": 237 },
    { "span": "Transaction", "type": "Item", "start": 239, "end": 250 },
    { "span": "bank computer", "type": "System", "start": 255, "end": 268 },
    { "span": "process", "type": "Function", "start": 287, "end": 294 },
    { "span": "transaction", "type": "Item", "start": 297, "end": 308 },
    { "span": "ATM", "type": "System", "start": 318, "end": 321 }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 6",
    "description": "If it is a valid cash card, a valid password, and there are no problems with the account, the bank computer will send a message to the ATM indicating that everything is ok.",
    "input": "Valid cash card, password, and account",
    "processing": "Process message.",
    "output": "Send “account ok” to the ATM. Transaction: the bank computer receives a request to process a transaction from the ATM."
  }
}

{
  "title": "Functional requirement 7",
  "text": "If there is a request to process a transaction on an account and amount m to withdraw | After the request, the bank computer processes the transaction | Then if the transaction succeeded, the bank computer sends the message “transaction succeeded” to the ATM. If not, it sends “transaction failed”.",
  "boilerplate": {
    "prefix": "If there is a request to <Function:process> a <Item:transaction> on an <Item:account> and amount m to <Function:withdraw>",
    "main": "After the request, the <System:bank computer> <Function:process>es the <Item:transaction>.",
    "suffix": "Then if the <Item:transaction> succeeded, the <System:bank computer> <Function:send>s the <Flow:message> “<Item:transaction> succeeded” to the <System:ATM>. If not, it <Function:send>s “<Item:transaction> failed”."
  },
  "boilerplate_type": "M3",
  "placeholders": [
    { "span": "process", "type": "Function", "start": 31, "end": 38 },
    { "span": "transaction", "type": "Item", "start": 41, "end": 52 },
    { "span": "account", "type": "Item", "start": 60, "end": 67 },
    { "span": "withdraw", "type": "Function", "start": 82, "end": 90 },
    { "span": "bank computer", "type": "System", "start": 122, "end": 135 },
    { "span": "process", "type": "Function", "start": 136, "end": 143 },
    { "span": "transaction", "type": "Item", "start": 150, "end": 161 },
    { "span": "transaction", "type": "Item", "start": 185, "end": 196 },
    { "span": "bank computer", "type": "System", "start": 212, "end": 225 },
    { "span": "send", "type": "Function", "start": 226, "end": 230 },
    { "span": "message", "type": "Flow", "start": 236, "end": 243 },
    { "span": "transaction", "type": "Item", "start": 245, "end": 256 },
    { "span": "ATM", "type": "System", "start": 275, "end": 278 },
    { "span": "send", "type": "Function", "start": 297, "end": 301 },
    { "span": "transaction", "type": "Item", "start": 303, "end": 314 }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 7",
    "description": "After the request, the bank computer processes the transaction.",
    "input": "Request to process a transaction on an account and amount m to withdraw.",
    "processing": "Process transaction together with the software of the bank. Update k for amount.",
    "output": "If the transaction succeeded, the bank computer sends the message “transaction succeeded” to the ATM. If not, it sends “transaction failed”."
  }
}

{
  "title": "Functional requirement 8",
  "text": "If there is a response from the ATM about money dispensed. | The account is updated after the money is dispensed. | Then a new account record is created.",
  "boilerplate": {
    "prefix": "If there is a response from the <System:ATM> about <Item:money> being <Function:dispense>d",
    "main": "The <Item:account> is <Function:update>d after the <Item:money> is <Function:dispense>d",
    "suffix": "Then a new <Item:account> record is created"
  },
  "placeholders": [
    {
      "span": "ATM",
      "type": "System",
      "start": 33,
      "end": 36
    },
    {
      "span": "money",
      "type": "Item",
      "start": 43,
      "end": 48
    },
    {
      "span": "dispense",
      "type": "Function",
      "start": 56,
      "end": 64
    },
    {
      "span": "account",
      "type": "Item",
      "start": 81,
      "end": 88
    },
    {
      "span": "update",
      "type": "Function",
      "start": 93,
      "end": 99
    },
    {
      "span": "money",
      "type": "Item",
      "start": 117,
      "end": 122
    },
    {
      "span": "dispense",
      "type": "Function",
      "start": 130,
      "end": 138
    },
    {
      "span": "account",
      "type": "Item",
      "start": 157,
      "end": 164
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 8",
    "description": "The account is updated after the money is dispensed.",
    "input": "Response from ATM about money dispensed.",
    "processing": "Update the account.",
    "output": "New account record."
  },
  "boilerplate_type": "M7 – Postcondition after Event Occurrence"
}

{
  "title": "Functional requirement 9",
  "text": "If there is a request to process a transaction. | Each bank has a limit k for each account regarding the amount of money available via cash card per day or month. | Then, if the requested amount exceeds this limit, the transaction will fail.",
  "boilerplate": {
    "prefix": "If there is a request to <Function:process> a <Item:transaction>.",
    "main": "Each <Environment:bank> has a limit k for each <Item:account> regarding the amount of <Item:money> available via <Item:cash card> per day or month.",
    "suffix": "Then, if the requested amount exceeds the limit, the <Item:transaction> will fail."
  },
  "placeholders": [
    {
      "span": "process",
      "type": "Function",
      "start": 30,
      "end": 37
    },
    {
      "span": "transaction",
      "type": "Item",
      "start": 40,
      "end": 51
    },
    {
      "span": "bank",
      "type": "Environment",
      "start": 68,
      "end": 72
    },
    {
      "span": "account",
      "type": "Item",
      "start": 100,
      "end": 107
    },
    {
      "span": "money",
      "type": "Item",
      "start": 137,
      "end": 142
    },
    {
      "span": "cash card",
      "type": "Item",
      "start": 157,
      "end": 166
    },
    {
      "span": "transaction",
      "type": "Item",
      "start": 237,
      "end": 248
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 9",
    "description": "Each bank has a limit k for each account regarding the amount of money available via cash card per day or month.",
    "input": "Request to process a transaction.",
    "processing": "Check if the requested amount of money does not exceed k.",
    "output": "If the amount exceeds the limit, the transaction will fail."
  },
  "boilerplate_type": "M8 – Constraint on Transaction Based on Limit"
}

{
  "title": "Functional requirement 10",
  "text": "The bank only provides security for their own computer and their own software.",
  "boilerplate": {
    "prefix": null,
    "main": "The <Environment:bank> SHALL BE RESPONSIBLE FOR the security of their own computer and software.",
    "suffix": null
  },
  "placeholders": [
    {
      "span": "bank",
      "type": "Environment",
      "start": 4,
      "end": 8
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Functional requirement 10",
    "description": "The bank only provides security for their own computer and their own software.",
    "input": "",
    "processing": "",
    "output": ""
  },
  "boilerplate_type": "M19"
}

{
  "title": "Performance requirement 1",
  "text": "System shall set the error message for at least 30 seconds.",
  "boilerplate": {
    "prefix": null,
    "main": "system:System SHALL SET AT_LEAST 30 second item:Item:Error_message",
    "suffix": null
  },
  "placeholders": [
    {
      "span": "System",
      "type": "System",
      "start": 0,
      "end": 6
    },
    {
      "span": "Error message",
      "type": "Item",
      "start": 28,
      "end": 42
    }
  ],
  "boilerplate_type": "M1",
  "shacl_validation": "pending",
  "meta": {
    "title": "Performance requirement 1",
    "description": "System shall set the error message for at least 30 seconds.",
    "input": "",
    "processing": "",
    "output": ""
  }
}

{
  "title": "Performance Requirement 2",
  "text": "If there is no response from the bank computer after a request within 2 minutes the card is rejected with an error message.",
  "boilerplate": {
    "prefix": "IF system:System:bank_computer SHALL NOT SEND item:Item:response",
    "main": "system:System:atm_controller SHALL SET item:Item:card TO stateValue:StateValue:rejected",
    "suffix": null
  },
  "placeholders": [
    {
      "span": "bank computer",
      "type": "System",
      "start": 33,
      "end": 46
    },
    {
      "span": "response",
      "type": "Item",
      "start": 26,
      "end": 34
    },
    {
      "span": "atm controller",
      "type": "System",
      "start": -1,
      "end": -1
    },
    {
      "span": "card",
      "type": "Item",
      "start": 84,
      "end": 88
    },
    {
      "span": "rejected",
      "type": "StateValue",
      "start": 97,
      "end": 105
    }
  ],
  "boilerplate_type": "P1-M1",
  "shacl_validation": "pending",
  "meta": {
    "title": "Performance Requirement 2",
    "description": "If there is no response from the bank computer after a request within 2 minutes the card is rejected with an error message.",
    "input": "",
    "processing": "",
    "output": ""
  }
}

{
  "title": "Performance Requirement 3",
  "text": "The ATM dispenses money if and only if the withdrawal from the account is processed and accepted by the bank.",
  "boilerplate": {
    "prefix": null,
    "main": "The <System:ATM> <Function:dispense>s <Item:money> if and only if the <Function:withdraw>al from the account is <Function:process>ed and <State:accepted> by the <Environment:bank>.",
    "suffix": null
  },
  "boilerplate_type": "M1-IFONLY",
  "placeholders": [
    {
      "span": "ATM",
      "type": "System",
      "start": 4,
      "end": 7
    },
    {
      "span": "dispense",
      "type": "Function",
      "start": 8,
      "end": 16
    },
    {
      "span": "money",
      "type": "Item",
      "start": 18,
      "end": 23
    },
    {
      "span": "withdraw",
      "type": "Function",
      "start": 43,
      "end": 51
    },
    {
      "span": "process",
      "type": "Function",
      "start": 74,
      "end": 81
    },
    {
      "span": "accepted",
      "type": "State",
      "start": 88,
      "end": 96
    },
    {
      "span": "bank",
      "type": "Environment",
      "start": 104,
      "end": 108
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Performance Requirement 3",
    "description": "The ATM dispenses money if and only if the withdrawal from the account is processed and accepted by the bank.",
    "input": "Withdrawal request initiated by ATM",
    "processing": "Bank processes and accepts the withdrawal",
    "output": "ATM dispenses money"
  }
}

{
  "title": "Performance Requirement 4",
  "text": "Each bank may be processing transactions from several ATMs at the same time.",
  "boilerplate": {
    "prefix": null,
    "main": "Each <Environment:bank> may be <Function:process>ing <Item:transaction>s from several <System:ATM>s at the same time.",
    "suffix": null
  },
  "boilerplate_type": "P1-M1",
  "placeholders": [
    {
      "span": "bank",
      "type": "Environment",
      "start": 5,
      "end": 9
    },
    {
      "span": "process",
      "type": "Function",
      "start": 17,
      "end": 24
    },
    {
      "span": "transaction",
      "type": "Item",
      "start": 28,
      "end": 39
    },
    {
      "span": "ATM",
      "type": "System",
      "start": 54,
      "end": 57
    }
  ],
  "shacl_validation": "pending",
  "meta": {
    "title": "Performance Requirement 4",
    "description": "Each bank may be processing transactions from several ATMs at the same time.",
    "input": "Multiple concurrent requests from ATMs",
    "processing": "Bank processes several transactions simultaneously",
    "output": "Parallel transaction processing"
  }
}
